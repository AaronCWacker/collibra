"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_data_quality_rule_request import AddDataQualityRuleRequest
from collibra_core.model.change_data_quality_rule_request import ChangeDataQualityRuleRequest
from collibra_core.model.data_quality_rule_impl import DataQualityRuleImpl
from collibra_core.model.data_quality_rule_paged_response import DataQualityRulePagedResponse


class DataQualityRulesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_data_quality_rule(
            self,
            **kwargs
        ):
            """Adds a new data quality rule.  # noqa: E501

            Adds a new data quality rule.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_data_quality_rule(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_data_quality_rule_request (AddDataQualityRuleRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataQualityRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_data_quality_rule = Endpoint(
            settings={
                'response_type': (DataQualityRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/dataQualityRules',
                'operation_id': 'add_data_quality_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_data_quality_rule_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_data_quality_rule_request':
                        (AddDataQualityRuleRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_data_quality_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_data_quality_rule
        )

        def __change_data_quality_rule(
            self,
            data_quality_rule_id,
            **kwargs
        ):
            """Changes the data quality rule with the information that is present in the request.  # noqa: E501

            Changes the data quality rule with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_data_quality_rule(data_quality_rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                data_quality_rule_id (str): the unique identifier of the data quality rule

            Keyword Args:
                change_data_quality_rule_request (ChangeDataQualityRuleRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataQualityRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['data_quality_rule_id'] = \
                data_quality_rule_id
            return self.call_with_http_info(**kwargs)

        self.change_data_quality_rule = Endpoint(
            settings={
                'response_type': (DataQualityRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/dataQualityRules/{dataQualityRuleId}',
                'operation_id': 'change_data_quality_rule',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_quality_rule_id',
                    'change_data_quality_rule_request',
                ],
                'required': [
                    'data_quality_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_quality_rule_id':
                        (str,),
                    'change_data_quality_rule_request':
                        (ChangeDataQualityRuleRequest,),
                },
                'attribute_map': {
                    'data_quality_rule_id': 'dataQualityRuleId',
                },
                'location_map': {
                    'data_quality_rule_id': 'path',
                    'change_data_quality_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_data_quality_rule
        )

        def __find_data_quality_rules(
            self,
            **kwargs
        ):
            """Returns data quality rules matching the given search criteria.  # noqa: E501

            Returns data quality rules matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned data quality rules satisfy all constraints that are specified in this search criteria. By default a result containing 1000 data quality rules is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_data_quality_rules(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                name (str): The name of the dataquality rule to search for.. [optional]
                name_match_mode (str): The match mode used to compare <code>name</code>.. [optional] if omitted the server will use the default value of "ANYWHERE"
                sort_field (str): The field that should be used as reference for sorting.. [optional] if omitted the server will use the default value of "NAME"
                sort_order (str): The order of sorting.. [optional] if omitted the server will use the default value of "ASC"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataQualityRulePagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_data_quality_rules = Endpoint(
            settings={
                'response_type': (DataQualityRulePagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/dataQualityRules',
                'operation_id': 'find_data_quality_rules',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'name',
                    'name_match_mode',
                    'sort_field',
                    'sort_order',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'name_match_mode',
                    'sort_field',
                    'sort_order',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('name_match_mode',): {

                        "START": "START",
                        "END": "END",
                        "ANYWHERE": "ANYWHERE",
                        "EXACT": "EXACT"
                    },
                    ('sort_field',): {

                        "NAME": "NAME"
                    },
                    ('sort_order',): {

                        "ASC": "ASC",
                        "DESC": "DESC"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'name_match_mode':
                        (str,),
                    'sort_field':
                        (str,),
                    'sort_order':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'name': 'name',
                    'name_match_mode': 'nameMatchMode',
                    'sort_field': 'sortField',
                    'sort_order': 'sortOrder',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'name_match_mode': 'query',
                    'sort_field': 'query',
                    'sort_order': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_data_quality_rules
        )

        def __get_data_quality_rule(
            self,
            data_quality_rule_id,
            **kwargs
        ):
            """Returns the DataQualityRule identified by given id.  # noqa: E501

            Returns the DataQualityRule identified by given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_data_quality_rule(data_quality_rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                data_quality_rule_id (str): the unique identifier of the data quality rule

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DataQualityRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['data_quality_rule_id'] = \
                data_quality_rule_id
            return self.call_with_http_info(**kwargs)

        self.get_data_quality_rule = Endpoint(
            settings={
                'response_type': (DataQualityRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/dataQualityRules/{dataQualityRuleId}',
                'operation_id': 'get_data_quality_rule',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_quality_rule_id',
                ],
                'required': [
                    'data_quality_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_quality_rule_id':
                        (str,),
                },
                'attribute_map': {
                    'data_quality_rule_id': 'dataQualityRuleId',
                },
                'location_map': {
                    'data_quality_rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_data_quality_rule
        )

        def __remove_data_quality_rule(
            self,
            data_quality_rule_id,
            **kwargs
        ):
            """Removes the DataQualityRule identified by the given id.  # noqa: E501

            Removes the DataQualityRule identified by the given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_data_quality_rule(data_quality_rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                data_quality_rule_id (str): the unique identifier of the data quality rule

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['data_quality_rule_id'] = \
                data_quality_rule_id
            return self.call_with_http_info(**kwargs)

        self.remove_data_quality_rule = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/dataQualityRules/{dataQualityRuleId}',
                'operation_id': 'remove_data_quality_rule',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_quality_rule_id',
                ],
                'required': [
                    'data_quality_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_quality_rule_id':
                        (str,),
                },
                'attribute_map': {
                    'data_quality_rule_id': 'dataQualityRuleId',
                },
                'location_map': {
                    'data_quality_rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_data_quality_rule
        )
