"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_asset_request import AddAssetRequest
from collibra_core.model.add_asset_tags_request import AddAssetTagsRequest
from collibra_core.model.asset_impl import AssetImpl
from collibra_core.model.asset_paged_response import AssetPagedResponse
from collibra_core.model.attribute import Attribute
from collibra_core.model.change_asset_request import ChangeAssetRequest
from collibra_core.model.named_resource_reference_impl import NamedResourceReferenceImpl
from collibra_core.model.relation_impl import RelationImpl
from collibra_core.model.remove_asset_tags_request import RemoveAssetTagsRequest
from collibra_core.model.responsibility_impl import ResponsibilityImpl
from collibra_core.model.set_asset_attributes_request import SetAssetAttributesRequest
from collibra_core.model.set_asset_relations_request import SetAssetRelationsRequest
from collibra_core.model.set_asset_responsibilities_request import SetAssetResponsibilitiesRequest
from collibra_core.model.set_asset_tags_request import SetAssetTagsRequest
from collibra_core.model.tag import Tag


class AssetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_asset(
            self,
            **kwargs
        ):
            """Add asset  # noqa: E501

            Adds a new asset to a domain  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_asset(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_asset_request (AddAssetRequest): The properties of the asset to be added. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_asset = Endpoint(
            settings={
                'response_type': (AssetImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets',
                'operation_id': 'add_asset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_asset_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_asset_request':
                        (AddAssetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_asset_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_asset
        )

        def __add_assets(
            self,
            **kwargs
        ):
            """Add multiple assets  # noqa: E501

            Adds multiple assets in one go  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_assets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_asset_request ([AddAssetRequest]): The properties of the assets to be added. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AssetImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_assets = Endpoint(
            settings={
                'response_type': ([AssetImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/bulk',
                'operation_id': 'add_assets',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_asset_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_asset_request':
                        ([AddAssetRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_asset_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_assets
        )

        def __add_tags_to_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Add tags  # noqa: E501

            Adds tags to the asset with the given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_tags_to_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                add_asset_tags_request (AddAssetTagsRequest): The tags to be added to a given asset. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.add_tags_to_asset = Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/tags',
                'operation_id': 'add_tags_to_asset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'add_asset_tags_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'add_asset_tags_request':
                        (AddAssetTagsRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'add_asset_tags_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_tags_to_asset
        )

        def __change_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Change asset  # noqa: E501

            Changes the asset with the given ID as specified by the given request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset to be changed

            Keyword Args:
                change_asset_request (ChangeAssetRequest): The properties of the assets to be changed. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.change_asset = Endpoint(
            settings={
                'response_type': (AssetImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}',
                'operation_id': 'change_asset',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'change_asset_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'change_asset_request':
                        (ChangeAssetRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'change_asset_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_asset
        )

        def __change_assets(
            self,
            **kwargs
        ):
            """Change multiple assets  # noqa: E501

            Changes multiple assets in one go  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_assets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                change_asset_request ([ChangeAssetRequest]): The properties of the assets to be changed. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AssetImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.change_assets = Endpoint(
            settings={
                'response_type': ([AssetImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/bulk',
                'operation_id': 'change_assets',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'change_asset_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'change_asset_request':
                        ([ChangeAssetRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'change_asset_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_assets
        )

        def __find_assets(
            self,
            **kwargs
        ):
            """Find assets  # noqa: E501

            Returns assets matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. By default a result containing 1000 assets is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_assets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                name (str): The name of the asset to search for (either display name or full name).. [optional]
                name_match_mode (str): The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.. [optional] if omitted the server will use the default value of "ANYWHERE"
                domain_id (str): The ID of the domain to find the assets in.. [optional]
                community_id (str): The ID of the community to find the assets in.. [optional]
                type_id ([str]): The list of IDs of the asset types. The returned assets are of one of types specified by this parameter.. [optional]
                status_id ([str]): The list of IDs of the statuses. The returned assets have one of statuses specified by this parameter.. [optional]
                tag_names ([str]): The list of names of tags. The returned assets have one of tags with names specified by this parameter.. [optional]
                type_inheritance (bool): Whether the type inheritance for the asset type filtering should be applied or not.. [optional] if omitted the server will use the default value of True
                exclude_meta (bool): The exclude meta flag. If this is set to true then the assets from meta domains will not be returned<br/>(meta domains are the domains which were not created by the user manually).. [optional] if omitted the server will use the default value of True
                sort_field (str): The field that should be used as reference for sorting.. [optional] if omitted the server will use the default value of "NAME"
                sort_order (str): The order of sorting.. [optional] if omitted the server will use the default value of "ASC"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetPagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_assets = Endpoint(
            settings={
                'response_type': (AssetPagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets',
                'operation_id': 'find_assets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'name',
                    'name_match_mode',
                    'domain_id',
                    'community_id',
                    'type_id',
                    'status_id',
                    'tag_names',
                    'type_inheritance',
                    'exclude_meta',
                    'sort_field',
                    'sort_order',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'name_match_mode',
                    'sort_field',
                    'sort_order',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('name_match_mode',): {

                        "START": "START",
                        "END": "END",
                        "ANYWHERE": "ANYWHERE",
                        "EXACT": "EXACT"
                    },
                    ('sort_field',): {

                        "NAME": "NAME",
                        "DISPLAY_NAME": "DISPLAY_NAME"
                    },
                    ('sort_order',): {

                        "ASC": "ASC",
                        "DESC": "DESC"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'name_match_mode':
                        (str,),
                    'domain_id':
                        (str,),
                    'community_id':
                        (str,),
                    'type_id':
                        ([str],),
                    'status_id':
                        ([str],),
                    'tag_names':
                        ([str],),
                    'type_inheritance':
                        (bool,),
                    'exclude_meta':
                        (bool,),
                    'sort_field':
                        (str,),
                    'sort_order':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'name': 'name',
                    'name_match_mode': 'nameMatchMode',
                    'domain_id': 'domainId',
                    'community_id': 'communityId',
                    'type_id': 'typeId',
                    'status_id': 'statusId',
                    'tag_names': 'tagNames',
                    'type_inheritance': 'typeInheritance',
                    'exclude_meta': 'excludeMeta',
                    'sort_field': 'sortField',
                    'sort_order': 'sortOrder',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'name_match_mode': 'query',
                    'domain_id': 'query',
                    'community_id': 'query',
                    'type_id': 'query',
                    'status_id': 'query',
                    'tag_names': 'query',
                    'type_inheritance': 'query',
                    'exclude_meta': 'query',
                    'sort_field': 'query',
                    'sort_order': 'query',
                },
                'collection_format_map': {
                    'type_id': 'multi',
                    'status_id': 'multi',
                    'tag_names': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_assets
        )

        def __get_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Get asset  # noqa: E501

            Returns the asset having the given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_asset = Endpoint(
            settings={
                'response_type': (AssetImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}',
                'operation_id': 'get_asset',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_asset
        )

        def __get_asset_breadcrumb(
            self,
            asset_id,
            **kwargs
        ):
            """Get asset breadcrumb  # noqa: E501

            Returns the list of resources that lead to the asset identified by the given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_asset_breadcrumb(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [NamedResourceReferenceImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_asset_breadcrumb = Endpoint(
            settings={
                'response_type': ([NamedResourceReferenceImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/breadcrumb',
                'operation_id': 'get_asset_breadcrumb',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_asset_breadcrumb
        )

        def __get_asset_tags(
            self,
            asset_id,
            **kwargs
        ):
            """Get asset tags  # noqa: E501

            Returns all tags of the asset with the given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_asset_tags(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_asset_tags = Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/tags',
                'operation_id': 'get_asset_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_asset_tags
        )

        def __remove_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Remove asset  # noqa: E501

            Removes an asset identified by given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.remove_asset = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}',
                'operation_id': 'remove_asset',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_asset
        )

        def __remove_assets(
            self,
            **kwargs
        ):
            """Remove assets  # noqa: E501

            Removes multiple assets.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_assets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_body ([str]): The IDs of the assets to be removed. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.remove_assets = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/bulk',
                'operation_id': 'remove_assets',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_assets
        )

        def __remove_tags_from_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Remove tags  # noqa: E501

            Removes tags from the asset with the given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_tags_from_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                remove_asset_tags_request (RemoveAssetTagsRequest): The tags to be removed from given asset. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.remove_tags_from_asset = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/tags',
                'operation_id': 'remove_tags_from_asset',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'remove_asset_tags_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'remove_asset_tags_request':
                        (RemoveAssetTagsRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'remove_asset_tags_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_tags_from_asset
        )

        def __set_asset_attributes(
            self,
            asset_id,
            **kwargs
        ):
            """Set asset attributes  # noqa: E501

            Replaces all attributes of the asset with the given ID (of given attribute type) with the attributes from the request, except matching attributes, which are retained.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_asset_attributes(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                set_asset_attributes_request (SetAssetAttributesRequest): The attributes to be set on the given asset. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Attribute]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.set_asset_attributes = Endpoint(
            settings={
                'response_type': ([Attribute],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/attributes',
                'operation_id': 'set_asset_attributes',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'set_asset_attributes_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'set_asset_attributes_request':
                        (SetAssetAttributesRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'set_asset_attributes_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_asset_attributes
        )

        def __set_asset_relations(
            self,
            asset_id,
            **kwargs
        ):
            """Set asset relations  # noqa: E501

            Sets relations for the asset with the given ID. All the relations described by this request will replace the existing ones (identified with asset as one end, relation type and direction of the relation).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_asset_relations(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                set_asset_relations_request (SetAssetRelationsRequest): The relations to be set on given asset. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [RelationImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.set_asset_relations = Endpoint(
            settings={
                'response_type': ([RelationImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/relations',
                'operation_id': 'set_asset_relations',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'set_asset_relations_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'set_asset_relations_request':
                        (SetAssetRelationsRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'set_asset_relations_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_asset_relations
        )

        def __set_asset_responsibilities(
            self,
            asset_id,
            **kwargs
        ):
            """Set asset responsibilities  # noqa: E501

            Sets responsibilities for the asset with the given ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_asset_responsibilities(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                set_asset_responsibilities_request (SetAssetResponsibilitiesRequest): The responsibilities to be set on given asset. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ResponsibilityImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.set_asset_responsibilities = Endpoint(
            settings={
                'response_type': ([ResponsibilityImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/responsibilities',
                'operation_id': 'set_asset_responsibilities',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'set_asset_responsibilities_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'set_asset_responsibilities_request':
                        (SetAssetResponsibilitiesRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'set_asset_responsibilities_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_asset_responsibilities
        )

        def __set_tags_for_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Set asset tags  # noqa: E501

            Sets tags for the asset with the given ID. The asset will contain only those tags specified in the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_tags_for_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The ID of the asset

            Keyword Args:
                set_asset_tags_request (SetAssetTagsRequest): The tags to be set on given asset. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.set_tags_for_asset = Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assets/{assetId}/tags',
                'operation_id': 'set_tags_for_asset',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                    'set_asset_tags_request',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                    'set_asset_tags_request':
                        (SetAssetTagsRequest,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                    'set_asset_tags_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_tags_for_asset
        )
