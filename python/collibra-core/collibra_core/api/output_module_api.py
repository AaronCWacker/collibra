"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class OutputModuleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __export_csv(
            self,
            **kwargs
        ):
            """Exports results in CSV format, returns the results immediately.  # noqa: E501

            <p>Performs an Output Module query and exports the results immediately in CSV format.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_csv(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is <code>false</code> for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                separator (str): The delimiter character used to separate entries. Default value is <code>';'</code>.. [optional]
                quote (str): The delimiter character used for quoted entries. Default value  is <code>'\"'</code>.. [optional]
                escape (str): The delimiter character used to escape separator or quote character. Default value is <code>'\\\\'</code>.. [optional]
                header_row (bool): Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.. [optional] if omitted the server will use the default value of True
                body (str): The JSON representation of TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_csv = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/csv',
                'operation_id': 'export_csv',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'separator',
                    'quote',
                    'escape',
                    'header_row',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'separator':
                        (str,),
                    'quote':
                        (str,),
                    'escape':
                        (str,),
                    'header_row':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'separator': 'separator',
                    'quote': 'quote',
                    'escape': 'escape',
                    'header_row': 'headerRow',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'separator': 'query',
                    'quote': 'query',
                    'escape': 'query',
                    'header_row': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_csv
        )

        def __export_csv_in_job(
            self,
            **kwargs
        ):
            """Exports results in CSV format, returns JSON representation of the async Job.  # noqa: E501

            <p>Starts a job that performs an Output Module query and stores the results in a file in CSV format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_csv_in_job(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated. [optional]
                separator (str): The delimiter character used to separate entries. Default value is <code>';'</code>.. [optional]
                quote (str): The delimiter character used for quoted entries. Default value  is <code>'\"'</code>.. [optional]
                escape (str): The delimiter character used to escape separator or quote character. Default value is <code>'\\\\'</code>.. [optional]
                header_row (bool): Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.. [optional] if omitted the server will use the default value of True
                send_notification (bool): Whether an e-mail must be sent on completion of the job.. [optional] if omitted the server will use the default value of False
                body (str): The JSON representation of TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_csv_in_job = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/csv-job',
                'operation_id': 'export_csv_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'file_name',
                    'separator',
                    'quote',
                    'escape',
                    'header_row',
                    'send_notification',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'separator':
                        (str,),
                    'quote':
                        (str,),
                    'escape':
                        (str,),
                    'header_row':
                        (bool,),
                    'send_notification':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                    'separator': 'separator',
                    'quote': 'quote',
                    'escape': 'escape',
                    'header_row': 'headerRow',
                    'send_notification': 'sendNotification',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'separator': 'query',
                    'quote': 'query',
                    'escape': 'query',
                    'header_row': 'query',
                    'send_notification': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_csv_in_job
        )

        def __export_csv_to_file(
            self,
            **kwargs
        ):
            """Exports results in CSV format, returns information about created file.  # noqa: E501

            <p>Performs an Output Module query and stores the query results in a file in CSV format. The id of the file is returned in the response.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_csv_to_file(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated. [optional]
                separator (str): The delimiter character used to separate entries. Default value is <code>';'</code>. [optional]
                quote (str): The delimiter character used for quoted entries. Default value  is <code>'\"'</code>. [optional]
                escape (str): The delimiter character used to escape separator or quote character. Default value is <code>'\\\\'</code>. [optional]
                header_row (bool): Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>. [optional] if omitted the server will use the default value of True
                body (str): The JSON representation of TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_csv_to_file = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/csv-file',
                'operation_id': 'export_csv_to_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'file_name',
                    'separator',
                    'quote',
                    'escape',
                    'header_row',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'separator':
                        (str,),
                    'quote':
                        (str,),
                    'escape':
                        (str,),
                    'header_row':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                    'separator': 'separator',
                    'quote': 'quote',
                    'escape': 'escape',
                    'header_row': 'headerRow',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'separator': 'query',
                    'quote': 'query',
                    'escape': 'query',
                    'header_row': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_csv_to_file
        )

        def __export_excel_in_job(
            self,
            **kwargs
        ):
            """Exports results in Excel format, returns JSON representation of the async Job.  # noqa: E501

            <p>Starts a job that performs an Output Module query and stores the results in a file in Excel format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p></p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_excel_in_job(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                send_notification (bool): Whether an e-mail must be sent on completion of the job.. [optional] if omitted the server will use the default value of False
                validation_enabled (bool): Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated.. [optional]
                sheet_name (str): The name of the sheet. By default no sheet name is set.. [optional]
                use_xlsx (bool): Whether the Excel file to export will be '.xlsx' file (<code>true</code>) or a '.xls' file (<code>false</code>. Default value is true.<br/>The parameter will be removed. In the future only XLSX files will be supported... [optional] if omitted the server will use the default value of True
                header_row (bool): Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.. [optional] if omitted the server will use the default value of True
                body (str): The JSON representation of TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_excel_in_job = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/excel-job',
                'operation_id': 'export_excel_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'send_notification',
                    'validation_enabled',
                    'file_name',
                    'sheet_name',
                    'use_xlsx',
                    'header_row',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'send_notification':
                        (bool,),
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'sheet_name':
                        (str,),
                    'use_xlsx':
                        (bool,),
                    'header_row':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'send_notification': 'sendNotification',
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                    'sheet_name': 'sheetName',
                    'use_xlsx': 'useXLSX',
                    'header_row': 'headerRow',
                },
                'location_map': {
                    'send_notification': 'query',
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'sheet_name': 'query',
                    'use_xlsx': 'query',
                    'header_row': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_excel_in_job
        )

        def __export_excel_to_file(
            self,
            **kwargs
        ):
            """Exports results in Excel format, returns information about created file.  # noqa: E501

            <p>Performs an Output Module query and stores the query results in a file in Excel format. The id of the file is returned in the response.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_excel_to_file(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated.. [optional]
                sheet_name (str): The name of the sheet. By default no sheet name is set.. [optional]
                use_xlsx (bool): Whether the Excel file to export will be '.xlsx' file (<code>true</code>) or a '.xls' file (<code>false</code>. Default value is true.<br/>The parameter will be removed. In the future only XLSX files will be supported.. [optional] if omitted the server will use the default value of True
                header_row (bool): Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.. [optional] if omitted the server will use the default value of True
                body (str): The JSON representation of TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_excel_to_file = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/excel-file',
                'operation_id': 'export_excel_to_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'file_name',
                    'sheet_name',
                    'use_xlsx',
                    'header_row',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'sheet_name':
                        (str,),
                    'use_xlsx':
                        (bool,),
                    'header_row':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                    'sheet_name': 'sheetName',
                    'use_xlsx': 'useXLSX',
                    'header_row': 'headerRow',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'sheet_name': 'query',
                    'use_xlsx': 'query',
                    'header_row': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_excel_to_file
        )

        def __export_json(
            self,
            **kwargs
        ):
            """Exports results in JSON format, returns the results immediately.  # noqa: E501

            <p>Performs an Output Module query and exports the returns results immediately in JSON format.</p><p>Please note that the ViewConfig/TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_json(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                body (str): The JSON representation of ViewConfig/TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_json = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/json',
                'operation_id': 'export_json',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_json
        )

        def __export_json_in_job(
            self,
            **kwargs
        ):
            """Exports results in JSON format, returns JSON representation of the async Job.  # noqa: E501

            <p>Starts a job that performs an Output Module query and stores the results in a file in JSON format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p><p>Please note that the ViewConfig/TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_json_in_job(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                send_notification (bool): Whether an e-mail must be sent on completion of the job.. [optional] if omitted the server will use the default value of False
                validation_enabled (bool): Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated.. [optional]
                body (str): The JSON representation of ViewConfig/TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_json_in_job = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/json-job',
                'operation_id': 'export_json_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'send_notification',
                    'validation_enabled',
                    'file_name',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'send_notification':
                        (bool,),
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'send_notification': 'sendNotification',
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'send_notification': 'query',
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_json_in_job
        )

        def __export_json_to_file(
            self,
            **kwargs
        ):
            """Exports results in JSON format, returns information about created file.  # noqa: E501

            <p>Performs an Output Module query and stores the query results in a file in JSON format. The id of the file is returned in the response.</p><p>Please note that the ViewConfig/TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_json_to_file(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated.. [optional]
                body (str): The JSON representation of ViewConfig/TableViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_json_to_file = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/json-file',
                'operation_id': 'export_json_to_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'file_name',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_json_to_file
        )

        def __export_xml(
            self,
            **kwargs
        ):
            """Exports results in XML format, returns the results immediately.  # noqa: E501

            <p>Performs an Output Module query and exports the returns results immediately in XML format.</p><p>Please note that the ViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results).For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_xml(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                body (str): The JSON representation of ViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_xml = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/xml',
                'operation_id': 'export_xml',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_xml
        )

        def __export_xml_in_job(
            self,
            **kwargs
        ):
            """Exports results in XML format, returns JSON representation of the async Job.  # noqa: E501

            <p>Starts a job that performs an Output Module query and stores the results in a file in XML format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p><p>Please note that the ViewConfig's syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_xml_in_job(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated.. [optional]
                body (str): The JSON representation of ViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_xml_in_job = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/xml-job',
                'operation_id': 'export_xml_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'file_name',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_xml_in_job
        )

        def __export_xml_to_file(
            self,
            **kwargs
        ):
            """Exports results in XML format, returns information about created file.  # noqa: E501

            <p>Performs an Output Module query and stores the query results in a file in XML format. The id of the file is returned in the response.</p><p>Please note that the ViewConfig's syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.export_xml_to_file(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                validation_enabled (bool): Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.. [optional] if omitted the server will use the default value of False
                file_name (str): The name of the file. By default the file name will be generated.. [optional]
                body (str): The JSON representation of ViewConfig that describes the query to be performed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.export_xml_to_file = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/export/xml-file',
                'operation_id': 'export_xml_to_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validation_enabled',
                    'file_name',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validation_enabled':
                        (bool,),
                    'file_name':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'validation_enabled': 'validationEnabled',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'validation_enabled': 'query',
                    'file_name': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__export_xml_to_file
        )

        def __get_table_view_config_by_view_id(
            self,
            view_id,
            **kwargs
        ):
            """Returns TableViewConfig based on id of given View and its Location.  # noqa: E501

            <b>EXPERIMENTAL</b> Returns Table View Config based on id of given View and its Location. This Table View Config can be used by Output Module to export data as visible in Collibra Data Governance Center User Interface.<p>This endpoint does not guarantee a one-to-one relation between what is visible in the User Interface and what will be exported by using the provided Table View Config. Due to the possibility of adding additional filters through User Interface the result can contain more rows then are visible in the User Interface. In such case the Table View Config produced by this endpoint should be manually adjusted. <p><b>Because obtaining the correct results needs a human intervention, this endpoint should not be used in any kind of automatic processing.</b><p>Example: given page under url https://dgc.collibra.com/glossary?view=133f7f30-033c-4e38-acc2-2c1ac599d19e the view <code>id</code> is <code>133f7f30-033c-4e38-acc2-2c1ac599d19e</code>.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_table_view_config_by_view_id(view_id, async_req=True)
            >>> result = thread.get()

            Args:
                view_id (str): The <code>id</code> of given View. Can be obtained from Collibra Data Governance Center User Interface

            Keyword Args:
                view_location (str): The Location for which the view shall be generated.Views in Collibra Data Governance Center are available under specific locations.Each location is associated with set of filters that are automatically applied to given view.Setting appropriate View Location will produce Table View Config that describes the data seen under desired location and given View in the best way possible.If this field is not provided then the returned Table View Config is going to have additional filters applied based on viewLocation extracted from database.`  <table><tr><th>viewLocation value </th><th> Corresponding view in Collibra Data Governance Center User Interface</th></tr><tr><td>BUSINESS_GLOSSARY_BUSINESS_ASSETS </td><td> Business Glossary Subpages: Business Assets (/glossary)Glossaries (/glossary/glossaries)</td></tr><tr><td>REFERENCE_DATA_CODEVALUES_AND_SETS </td><td> Reference Data > Code Values/Sets (/reference-data)</td></tr><tr><td>CATALOG_DATA_SETS </td><td> Catalog > Data Sets (/catalog/data-sets)</td><td><tr><td>CATALOG_DATA_DICTIONARY </td><td> Catalog > Data Dictionary (/catalog/data-dictionary)</td></tr><tr><td>CATALOG_TECHNOLOGY_ASSETS </td><td> Catalog > Technology Assets (/catalog/technology-assets)</td></tr><tr><td>DATA_HELPDESK_ISSUES </td><td> Data Helpdesk Subpages: Issues(/data-helpdesk)>Data Quality (/data-helpdesk/data-quality)</td></tr><tr><td>STEWARDSHIP_BUSINESS_DIMENSIONS </td><td> Stewardship > Business Dimensions (/stewardship/business-dimensions)</td></tr><tr><td>POLICY_MANAGER_GOVERNANCE_ASSETS </td><td> Policy Manager > Governance Assets (/policy-manager)</td></tr></table>. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['view_id'] = \
                view_id
            return self.call_with_http_info(**kwargs)

        self.get_table_view_config_by_view_id = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/outputModule/tableViewConfigs/viewId/{viewId}',
                'operation_id': 'get_table_view_config_by_view_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'view_id',
                    'view_location',
                ],
                'required': [
                    'view_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'view_location',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('view_location',): {

                        "GLOBAL_VIEW": "GLOBAL_VIEW",
                        "DOMAIN_DOMAIN_ASSETS": "DOMAIN_DOMAIN_ASSETS",
                        "COMMUNITY_COMMUNITY_ASSETS": "COMMUNITY_COMMUNITY_ASSETS",
                        "BUSINESS_GLOSSARY_BUSINESS_ASSETS": "BUSINESS_GLOSSARY_BUSINESS_ASSETS",
                        "BUSINESS_GLOSSARY_GLOSSARIES": "BUSINESS_GLOSSARY_GLOSSARIES",
                        "REFERENCE_DATA_CODEVALUES_AND_SETS": "REFERENCE_DATA_CODEVALUES_AND_SETS",
                        "REFERENCE_DATA_HIERARCHIES": "REFERENCE_DATA_HIERARCHIES",
                        "CATALOG_DATA_SETS": "CATALOG_DATA_SETS",
                        "CATALOG_DATA_SOURCES": "CATALOG_DATA_SOURCES",
                        "CATALOG_DATA_DICTIONARY": "CATALOG_DATA_DICTIONARY",
                        "CATALOG_TECHNOLOGY_ASSETS": "CATALOG_TECHNOLOGY_ASSETS",
                        "CATALOG_REPORTS": "CATALOG_REPORTS",
                        "DATA_HELPDESK_ISSUES": "DATA_HELPDESK_ISSUES",
                        "DATA_HELPDESK_DATA_QUALITY": "DATA_HELPDESK_DATA_QUALITY",
                        "STEWARDSHIP_BUSINESS_DIMENSIONS": "STEWARDSHIP_BUSINESS_DIMENSIONS",
                        "POLICY_MANAGER_GOVERNANCE_ASSETS": "POLICY_MANAGER_GOVERNANCE_ASSETS"
                    },
                },
                'openapi_types': {
                    'view_id':
                        (str,),
                    'view_location':
                        (str,),
                },
                'attribute_map': {
                    'view_id': 'viewId',
                    'view_location': 'viewLocation',
                },
                'location_map': {
                    'view_id': 'path',
                    'view_location': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_table_view_config_by_view_id
        )
