"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_attribute_type_request import AddAttributeTypeRequest
from collibra_core.model.attribute_type import AttributeType
from collibra_core.model.attribute_type_paged_response import AttributeTypePagedResponse
from collibra_core.model.change_attribute_type_request import ChangeAttributeTypeRequest


class AttributeTypesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_attribute_type(
            self,
            **kwargs
        ):
            """Adds a new Attribute Type.  # noqa: E501

            Adds a new Attribute Type.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_attribute_type(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_attribute_type_request (AddAttributeTypeRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_attribute_type = Endpoint(
            settings={
                'response_type': (AttributeType,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes',
                'operation_id': 'add_attribute_type',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_attribute_type_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_attribute_type_request':
                        (AddAttributeTypeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_attribute_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_attribute_type
        )

        def __add_attribute_types(
            self,
            **kwargs
        ):
            """Adds multiple Attribute Types.  # noqa: E501

            Adds multiple Attribute Types.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_attribute_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_attribute_type_request ([AddAttributeTypeRequest]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_attribute_types = Endpoint(
            settings={
                'response_type': (AttributeType,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/bulk',
                'operation_id': 'add_attribute_types',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_attribute_type_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_attribute_type_request':
                        ([AddAttributeTypeRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_attribute_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_attribute_types
        )

        def __change_attribute_type(
            self,
            attribute_type_id,
            **kwargs
        ):
            """Changes the attribute types.  # noqa: E501

            Changes the attribute types with the information present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_attribute_type(attribute_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                attribute_type_id (str): the unique identifier of the attribute type

            Keyword Args:
                change_attribute_type_request (ChangeAttributeTypeRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['attribute_type_id'] = \
                attribute_type_id
            return self.call_with_http_info(**kwargs)

        self.change_attribute_type = Endpoint(
            settings={
                'response_type': (AttributeType,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/{attributeTypeId}',
                'operation_id': 'change_attribute_type',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'attribute_type_id',
                    'change_attribute_type_request',
                ],
                'required': [
                    'attribute_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attribute_type_id':
                        (str,),
                    'change_attribute_type_request':
                        (ChangeAttributeTypeRequest,),
                },
                'attribute_map': {
                    'attribute_type_id': 'attributeTypeId',
                },
                'location_map': {
                    'attribute_type_id': 'path',
                    'change_attribute_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_attribute_type
        )

        def __change_attribute_types(
            self,
            **kwargs
        ):
            """Changes multiple attribute types.  # noqa: E501

            Changes multiple attribute types with the information present in the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_attribute_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                change_attribute_type_request ([ChangeAttributeTypeRequest]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AttributeType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.change_attribute_types = Endpoint(
            settings={
                'response_type': ([AttributeType],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/bulk',
                'operation_id': 'change_attribute_types',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'change_attribute_type_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'change_attribute_type_request':
                        ([ChangeAttributeTypeRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'change_attribute_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_attribute_types
        )

        def __find_attribute_types(
            self,
            **kwargs
        ):
            """Returns attribute types matching the given search criteria.  # noqa: E501

            Returns attribute types matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned attribute types satisfy all constraints that are specified in this search criteria. By default a result containing 1000 attribute types is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_attribute_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                name (str): The name of the attribute type to search for.. [optional]
                name_match_mode (str): The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.. [optional] if omitted the server will use the default value of "ANYWHERE"
                kind (str): The kind of the attribute type to search for.. [optional]
                language (str): The language of the attribute type to search for.. [optional]
                statistics_enabled (bool): Whether the attribute types should be searched with statistics enabled or not.. [optional]
                is_integer (bool): Whether only integer-type attribute types should be searched or not.. [optional]
                sort_field (str): The field that should be used as reference for sorting.. [optional] if omitted the server will use the default value of "NAME"
                sort_order (str): The order of sorting.. [optional] if omitted the server will use the default value of "ASC"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeTypePagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_attribute_types = Endpoint(
            settings={
                'response_type': (AttributeTypePagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes',
                'operation_id': 'find_attribute_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'name',
                    'name_match_mode',
                    'kind',
                    'language',
                    'statistics_enabled',
                    'is_integer',
                    'sort_field',
                    'sort_order',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'name_match_mode',
                    'kind',
                    'sort_field',
                    'sort_order',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('name_match_mode',): {

                        "START": "START",
                        "END": "END",
                        "ANYWHERE": "ANYWHERE",
                        "EXACT": "EXACT"
                    },
                    ('kind',): {

                        "BOOLEAN": "BOOLEAN",
                        "STRING": "STRING",
                        "NUMERIC": "NUMERIC",
                        "DATE": "DATE",
                        "SINGLE_VALUE_LIST": "SINGLE_VALUE_LIST",
                        "MULTI_VALUE_LIST": "MULTI_VALUE_LIST",
                        "SCRIPT": "SCRIPT"
                    },
                    ('sort_field',): {

                        "NAME": "NAME",
                        "KIND": "KIND",
                        "STATISTICS_ENABLED": "STATISTICS_ENABLED",
                        "IS_INTEGER": "IS_INTEGER",
                        "ALLOWED_VALUES": "ALLOWED_VALUES"
                    },
                    ('sort_order',): {

                        "ASC": "ASC",
                        "DESC": "DESC"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'name_match_mode':
                        (str,),
                    'kind':
                        (str,),
                    'language':
                        (str,),
                    'statistics_enabled':
                        (bool,),
                    'is_integer':
                        (bool,),
                    'sort_field':
                        (str,),
                    'sort_order':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'name': 'name',
                    'name_match_mode': 'nameMatchMode',
                    'kind': 'kind',
                    'language': 'language',
                    'statistics_enabled': 'statisticsEnabled',
                    'is_integer': 'isInteger',
                    'sort_field': 'sortField',
                    'sort_order': 'sortOrder',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'name_match_mode': 'query',
                    'kind': 'query',
                    'language': 'query',
                    'statistics_enabled': 'query',
                    'is_integer': 'query',
                    'sort_field': 'query',
                    'sort_order': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_attribute_types
        )

        def __get_attribute_type(
            self,
            attribute_type_id,
            **kwargs
        ):
            """Returns the attribute type identified by given UUID.  # noqa: E501

            Returns the attribute type identified by given UUID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_attribute_type(attribute_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                attribute_type_id (str): the unique identifier of the attribute type

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['attribute_type_id'] = \
                attribute_type_id
            return self.call_with_http_info(**kwargs)

        self.get_attribute_type = Endpoint(
            settings={
                'response_type': (AttributeType,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/{attributeTypeId}',
                'operation_id': 'get_attribute_type',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attribute_type_id',
                ],
                'required': [
                    'attribute_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attribute_type_id':
                        (str,),
                },
                'attribute_map': {
                    'attribute_type_id': 'attributeTypeId',
                },
                'location_map': {
                    'attribute_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_attribute_type
        )

        def __get_attribute_type_by_name(
            self,
            attribute_type_name,
            **kwargs
        ):
            """Returns the attribute type identified by given name.  # noqa: E501

            Returns the attribute type identified by given name.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_attribute_type_by_name(attribute_type_name, async_req=True)
            >>> result = thread.get()

            Args:
                attribute_type_name (str): the unique identifier of the attribute type

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AttributeType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['attribute_type_name'] = \
                attribute_type_name
            return self.call_with_http_info(**kwargs)

        self.get_attribute_type_by_name = Endpoint(
            settings={
                'response_type': (AttributeType,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/name/{attributeTypeName}',
                'operation_id': 'get_attribute_type_by_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'attribute_type_name',
                ],
                'required': [
                    'attribute_type_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attribute_type_name':
                        (str,),
                },
                'attribute_map': {
                    'attribute_type_name': 'attributeTypeName',
                },
                'location_map': {
                    'attribute_type_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_attribute_type_by_name
        )

        def __remove_attribute_type(
            self,
            attribute_type_id,
            **kwargs
        ):
            """Removes attribute type identified by given UUID.  # noqa: E501

            Removes attribute type identified by given UUID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_attribute_type(attribute_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                attribute_type_id (str): the unique identifier of the attribute type

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['attribute_type_id'] = \
                attribute_type_id
            return self.call_with_http_info(**kwargs)

        self.remove_attribute_type = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/{attributeTypeId}',
                'operation_id': 'remove_attribute_type',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'attribute_type_id',
                ],
                'required': [
                    'attribute_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'attribute_type_id':
                        (str,),
                },
                'attribute_map': {
                    'attribute_type_id': 'attributeTypeId',
                },
                'location_map': {
                    'attribute_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_attribute_type
        )

        def __remove_attribute_types(
            self,
            **kwargs
        ):
            """Removes multiple attribute types.  # noqa: E501

            Removes multiple attribute types identified by the UUIDs passed as parameter.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_attribute_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_body ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.remove_attribute_types = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/attributeTypes/bulk',
                'operation_id': 'remove_attribute_types',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_attribute_types
        )
