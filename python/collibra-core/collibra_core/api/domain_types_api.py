"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_domain_type_request import AddDomainTypeRequest
from collibra_core.model.change_domain_type_request import ChangeDomainTypeRequest
from collibra_core.model.domain_type_impl import DomainTypeImpl
from collibra_core.model.domain_type_paged_response import DomainTypePagedResponse


class DomainTypesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_domain_type(
            self,
            **kwargs
        ):
            """Adds a new domain type.  # noqa: E501

            Adds a new domain type.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_domain_type(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_domain_type_request (AddDomainTypeRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DomainTypeImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_domain_type = Endpoint(
            settings={
                'response_type': (DomainTypeImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes',
                'operation_id': 'add_domain_type',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_domain_type_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_domain_type_request':
                        (AddDomainTypeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_domain_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_domain_type
        )

        def __add_domain_types(
            self,
            **kwargs
        ):
            """Adds multiple new domain types.  # noqa: E501

            Adds multiple new domain types.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_domain_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_domain_type_request ([AddDomainTypeRequest]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DomainTypeImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_domain_types = Endpoint(
            settings={
                'response_type': ([DomainTypeImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/bulk',
                'operation_id': 'add_domain_types',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_domain_type_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_domain_type_request':
                        ([AddDomainTypeRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_domain_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_domain_types
        )

        def __change_domain_type(
            self,
            domain_type_id,
            **kwargs
        ):
            """Changes the domain type.  # noqa: E501

            Changes the domain type with the information present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_domain_type(domain_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                domain_type_id (str): the unique identifier of the domain type

            Keyword Args:
                change_domain_type_request (ChangeDomainTypeRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DomainTypeImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['domain_type_id'] = \
                domain_type_id
            return self.call_with_http_info(**kwargs)

        self.change_domain_type = Endpoint(
            settings={
                'response_type': (DomainTypeImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/{domainTypeId}',
                'operation_id': 'change_domain_type',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain_type_id',
                    'change_domain_type_request',
                ],
                'required': [
                    'domain_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain_type_id':
                        (str,),
                    'change_domain_type_request':
                        (ChangeDomainTypeRequest,),
                },
                'attribute_map': {
                    'domain_type_id': 'domainTypeId',
                },
                'location_map': {
                    'domain_type_id': 'path',
                    'change_domain_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_domain_type
        )

        def __change_domain_types(
            self,
            **kwargs
        ):
            """Changes the domain types.  # noqa: E501

            Changes the domain types with the information present in the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_domain_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                change_domain_type_request ([ChangeDomainTypeRequest]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DomainTypeImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.change_domain_types = Endpoint(
            settings={
                'response_type': ([DomainTypeImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/bulk',
                'operation_id': 'change_domain_types',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'change_domain_type_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'change_domain_type_request':
                        ([ChangeDomainTypeRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'change_domain_type_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_domain_types
        )

        def __find_domain_types(
            self,
            **kwargs
        ):
            """Returns domain types matching the given search criteria.  # noqa: E501

            Returns domain types matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned domain types satisfy all constraints that are specified in this search criteria. By default a result containing 1000 domain types is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_domain_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                name (str): The name of the domain type to search for.. [optional]
                name_match_mode (str): The match mode used to compare <code>name</code>. The search is case-insensitive.. [optional] if omitted the server will use the default value of "ANYWHERE"
                parent_id (str): The ID of the parent to find the domain types in.. [optional]
                exclude_meta (bool): Whether the meta domain types should be excluded from search or not.. [optional] if omitted the server will use the default value of True
                top_level (bool): Whether only top level domain types should be searched or not.. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DomainTypePagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_domain_types = Endpoint(
            settings={
                'response_type': (DomainTypePagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes',
                'operation_id': 'find_domain_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'name',
                    'name_match_mode',
                    'parent_id',
                    'exclude_meta',
                    'top_level',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'name_match_mode',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('name_match_mode',): {

                        "START": "START",
                        "END": "END",
                        "ANYWHERE": "ANYWHERE",
                        "EXACT": "EXACT"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'name_match_mode':
                        (str,),
                    'parent_id':
                        (str,),
                    'exclude_meta':
                        (bool,),
                    'top_level':
                        (bool,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'name': 'name',
                    'name_match_mode': 'nameMatchMode',
                    'parent_id': 'parentId',
                    'exclude_meta': 'excludeMeta',
                    'top_level': 'topLevel',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'name_match_mode': 'query',
                    'parent_id': 'query',
                    'exclude_meta': 'query',
                    'top_level': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_domain_types
        )

        def __find_sub_domain_types(
            self,
            domain_type_id,
            domain_type_id2,
            **kwargs
        ):
            """Returns sub domain types matching the given search criteria.  # noqa: E501

            Returns sub domain types matching the given search criteria.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_sub_domain_types(domain_type_id, domain_type_id2, async_req=True)
            >>> result = thread.get()

            Args:
                domain_type_id (str): the unique identifier of the domain type
                domain_type_id2 (str): The ID of the domain type to search the sub types for.

            Keyword Args:
                include_parent (bool): Whether parent domain type should be included in the search result.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DomainTypePagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['domain_type_id'] = \
                domain_type_id
            kwargs['domain_type_id2'] = \
                domain_type_id2
            return self.call_with_http_info(**kwargs)

        self.find_sub_domain_types = Endpoint(
            settings={
                'response_type': (DomainTypePagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/{domainTypeId}/subTypes',
                'operation_id': 'find_sub_domain_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain_type_id',
                    'domain_type_id2',
                    'include_parent',
                ],
                'required': [
                    'domain_type_id',
                    'domain_type_id2',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain_type_id':
                        (str,),
                    'domain_type_id2':
                        (str,),
                    'include_parent':
                        (bool,),
                },
                'attribute_map': {
                    'domain_type_id': 'domainTypeId',
                    'domain_type_id2': 'domainTypeId',
                    'include_parent': 'includeParent',
                },
                'location_map': {
                    'domain_type_id': 'path',
                    'domain_type_id2': 'query',
                    'include_parent': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_sub_domain_types
        )

        def __get_domain_type(
            self,
            domain_type_id,
            **kwargs
        ):
            """Returns domain type identified by given UUID.  # noqa: E501

            Returns domain type identified by given UUID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_domain_type(domain_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                domain_type_id (str): the unique identifier of the domain type

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DomainTypeImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['domain_type_id'] = \
                domain_type_id
            return self.call_with_http_info(**kwargs)

        self.get_domain_type = Endpoint(
            settings={
                'response_type': (DomainTypeImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/{domainTypeId}',
                'operation_id': 'get_domain_type',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain_type_id',
                ],
                'required': [
                    'domain_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain_type_id':
                        (str,),
                },
                'attribute_map': {
                    'domain_type_id': 'domainTypeId',
                },
                'location_map': {
                    'domain_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_domain_type
        )

        def __remove_domain_type(
            self,
            domain_type_id,
            **kwargs
        ):
            """Removes domain type identified by given UUID.  # noqa: E501

            Removes domain type identified by given UUID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_domain_type(domain_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                domain_type_id (str): the unique identifier of the domain type

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['domain_type_id'] = \
                domain_type_id
            return self.call_with_http_info(**kwargs)

        self.remove_domain_type = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/{domainTypeId}',
                'operation_id': 'remove_domain_type',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain_type_id',
                ],
                'required': [
                    'domain_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain_type_id':
                        (str,),
                },
                'attribute_map': {
                    'domain_type_id': 'domainTypeId',
                },
                'location_map': {
                    'domain_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_domain_type
        )

        def __remove_domain_types(
            self,
            **kwargs
        ):
            """Removes multiple domain types.  # noqa: E501

            Removes multiple domain types identified by the UUIDs passed as parameter.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_domain_types(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_body ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.remove_domain_types = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/domainTypes/bulk',
                'operation_id': 'remove_domain_types',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_domain_types
        )
