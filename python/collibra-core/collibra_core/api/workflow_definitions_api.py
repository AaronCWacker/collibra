"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_asset_type_assignment_rule_request import AddAssetTypeAssignmentRuleRequest
from collibra_core.model.add_domain_type_assignment_rule_request import AddDomainTypeAssignmentRuleRequest
from collibra_core.model.asset_assignment_rule_impl import AssetAssignmentRuleImpl
from collibra_core.model.change_asset_type_assignment_rule_request import ChangeAssetTypeAssignmentRuleRequest
from collibra_core.model.change_domain_type_assignment_rule_request import ChangeDomainTypeAssignmentRuleRequest
from collibra_core.model.change_workflow_definition_request import ChangeWorkflowDefinitionRequest
from collibra_core.model.job import Job
from collibra_core.model.named_described_workflow_start_event_type import NamedDescribedWorkflowStartEventType
from collibra_core.model.start_form_data_impl import StartFormDataImpl
from collibra_core.model.workflow_definition_impl import WorkflowDefinitionImpl
from collibra_core.model.workflow_definition_paged_response import WorkflowDefinitionPagedResponse


class WorkflowDefinitionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_asset_type_assignment_rule(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Add asset type assignment rule.  # noqa: E501

            Adds an asset type assignment rule to the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_asset_type_assignment_rule(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                add_asset_type_assignment_rule_request (AddAssetTypeAssignmentRuleRequest): The request describing assignment rule to be added.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetAssignmentRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.add_asset_type_assignment_rule = Endpoint(
            settings={
                'response_type': (AssetAssignmentRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules',
                'operation_id': 'add_asset_type_assignment_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'add_asset_type_assignment_rule_request',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'add_asset_type_assignment_rule_request':
                        (AddAssetTypeAssignmentRuleRequest,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'add_asset_type_assignment_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_asset_type_assignment_rule
        )

        def __add_domain_type_assignment_rule(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Add domain type assignment rule.  # noqa: E501

            Adds a domain type assignment rule to the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_domain_type_assignment_rule(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                add_domain_type_assignment_rule_request (AddDomainTypeAssignmentRuleRequest): The request describing assignment rule to be added.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetAssignmentRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.add_domain_type_assignment_rule = Endpoint(
            settings={
                'response_type': (AssetAssignmentRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules',
                'operation_id': 'add_domain_type_assignment_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'add_domain_type_assignment_rule_request',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'add_domain_type_assignment_rule_request':
                        (AddDomainTypeAssignmentRuleRequest,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'add_domain_type_assignment_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_domain_type_assignment_rule
        )

        def __change_asset_type_assignment_rule(
            self,
            workflow_definition_id,
            rule_id,
            **kwargs
        ):
            """Change asset type assignment rule.  # noqa: E501

            Modifies the asset type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_asset_type_assignment_rule(workflow_definition_id, rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.
                rule_id (str): The ID of the assignment rule to be changed.

            Keyword Args:
                change_asset_type_assignment_rule_request (ChangeAssetTypeAssignmentRuleRequest): Parameters for the assignment rule to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetAssignmentRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            kwargs['rule_id'] = \
                rule_id
            return self.call_with_http_info(**kwargs)

        self.change_asset_type_assignment_rule = Endpoint(
            settings={
                'response_type': (AssetAssignmentRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules/{ruleId}',
                'operation_id': 'change_asset_type_assignment_rule',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'rule_id',
                    'change_asset_type_assignment_rule_request',
                ],
                'required': [
                    'workflow_definition_id',
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'rule_id':
                        (str,),
                    'change_asset_type_assignment_rule_request':
                        (ChangeAssetTypeAssignmentRuleRequest,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'rule_id': 'path',
                    'change_asset_type_assignment_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_asset_type_assignment_rule
        )

        def __change_domain_type_assignment_rule(
            self,
            workflow_definition_id,
            rule_id,
            **kwargs
        ):
            """Change domain type assignment rule.  # noqa: E501

            Modifies the domain type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_domain_type_assignment_rule(workflow_definition_id, rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.
                rule_id (str): The ID of the assignment rule to be changed.

            Keyword Args:
                change_domain_type_assignment_rule_request (ChangeDomainTypeAssignmentRuleRequest): Parameters for the assignment rule to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetAssignmentRuleImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            kwargs['rule_id'] = \
                rule_id
            return self.call_with_http_info(**kwargs)

        self.change_domain_type_assignment_rule = Endpoint(
            settings={
                'response_type': (AssetAssignmentRuleImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules/{ruleId}',
                'operation_id': 'change_domain_type_assignment_rule',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'rule_id',
                    'change_domain_type_assignment_rule_request',
                ],
                'required': [
                    'workflow_definition_id',
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'rule_id':
                        (str,),
                    'change_domain_type_assignment_rule_request':
                        (ChangeDomainTypeAssignmentRuleRequest,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'rule_id': 'path',
                    'change_domain_type_assignment_rule_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_domain_type_assignment_rule
        )

        def __change_workflow_definition(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Change workflow definition.  # noqa: E501

            Modifies the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_workflow_definition(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                change_workflow_definition_request (ChangeWorkflowDefinitionRequest): Parameters for the workflow definition to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkflowDefinitionImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.change_workflow_definition = Endpoint(
            settings={
                'response_type': (WorkflowDefinitionImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}',
                'operation_id': 'change_workflow_definition',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'change_workflow_definition_request',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'change_workflow_definition_request':
                        (ChangeWorkflowDefinitionRequest,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'change_workflow_definition_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_workflow_definition
        )

        def __deploy_workflow_definition(
            self,
            **kwargs
        ):
            """Deploy workflow definition.  # noqa: E501

            Deploys workflow definition (the business process and resources) using the specified request.<p> The input stream can represent a single file(e.g: .bpmn20.xml or .bpmn) or an archive file (e.g: .zip or .bar). It is not allowed to deploy a resource containing more than one process definition.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.deploy_workflow_definition(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                file (file_type): The file with described workflow definition.. [optional]
                file_name (str): The name of the file.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkflowDefinitionImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.deploy_workflow_definition = Endpoint(
            settings={
                'response_type': (WorkflowDefinitionImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions',
                'operation_id': 'deploy_workflow_definition',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'file',
                    'file_name',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'file':
                        (file_type,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'file': 'file',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'file': 'form',
                    'file_name': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__deploy_workflow_definition
        )

        def __find_workflow_definitions(
            self,
            **kwargs
        ):
            """Find workflow definitions.  # noqa: E501

            Finds the workflow definitions matching the criteria described in the request object. By default, the result contains up to 1000 workflow definitions.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_workflow_definitions(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                asset_id ([str]): The list of the IDs of business items (assets) for which the workflow definitions should be found.. [optional]
                domain_id ([str]): The list of the IDs of business items (domains) for which the workflow definitions should be found.. [optional]
                community_id ([str]): The list of the IDs of business items (communities) for which the workflow definitions should be found.. [optional]
                enabled (bool): Whether the found workflow definitions should be enabled.. [optional]
                _global (bool): Whether the found workflow definitions should be global.. [optional]
                name (str): The name (could be partial) of the workflow definition to search for.. [optional]
                sort_order (str): The sorting order.. [optional] if omitted the server will use the default value of "ASC"
                description (str): The description (could be partial) of the workflow definition to search for.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkflowDefinitionPagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_workflow_definitions = Endpoint(
            settings={
                'response_type': (WorkflowDefinitionPagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions',
                'operation_id': 'find_workflow_definitions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'asset_id',
                    'domain_id',
                    'community_id',
                    'enabled',
                    '_global',
                    'name',
                    'sort_order',
                    'description',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'sort_order',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('sort_order',): {

                        "ASC": "ASC",
                        "DESC": "DESC"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'asset_id':
                        ([str],),
                    'domain_id':
                        ([str],),
                    'community_id':
                        ([str],),
                    'enabled':
                        (bool,),
                    '_global':
                        (bool,),
                    'name':
                        (str,),
                    'sort_order':
                        (str,),
                    'description':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'asset_id': 'assetId',
                    'domain_id': 'domainId',
                    'community_id': 'communityId',
                    'enabled': 'enabled',
                    '_global': 'global',
                    'name': 'name',
                    'sort_order': 'sortOrder',
                    'description': 'description',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'asset_id': 'query',
                    'domain_id': 'query',
                    'community_id': 'query',
                    'enabled': 'query',
                    '_global': 'query',
                    'name': 'query',
                    'sort_order': 'query',
                    'description': 'query',
                },
                'collection_format_map': {
                    'asset_id': 'multi',
                    'domain_id': 'multi',
                    'community_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_workflow_definitions
        )

        def __get_configuration_start_form_data(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Get configuration start form data.  # noqa: E501

            Returns the task configuration start form data of the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_configuration_start_form_data(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition that should be used for the form data retrieval.

            Keyword Args:
                form_property_type (str): The form type to be returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StartFormDataImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.get_configuration_start_form_data = Endpoint(
            settings={
                'response_type': (StartFormDataImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/configurationStartFormData',
                'operation_id': 'get_configuration_start_form_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'form_property_type',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'form_property_type':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                    'form_property_type': 'formPropertyType',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'form_property_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_configuration_start_form_data
        )

        def __get_possible_start_events(
            self,
            **kwargs
        ):
            """Get all possible workflow start events  # noqa: E501

            Returns all possible workflow start events, including event name and description  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_possible_start_events(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [NamedDescribedWorkflowStartEventType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_possible_start_events = Endpoint(
            settings={
                'response_type': ([NamedDescribedWorkflowStartEventType],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/startEvents',
                'operation_id': 'get_possible_start_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_possible_start_events
        )

        def __get_start_form_data(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Get start form data.  # noqa: E501

            Returns the task start form data of the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_start_form_data(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition that should be used for the form data retrieval.

            Keyword Args:
                form_property_type (str): The form type to be returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StartFormDataImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.get_start_form_data = Endpoint(
            settings={
                'response_type': (StartFormDataImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/startFormData',
                'operation_id': 'get_start_form_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'form_property_type',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'form_property_type':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                    'form_property_type': 'formPropertyType',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'form_property_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_start_form_data
        )

        def __get_workflow_definition(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Get workflow definition.  # noqa: E501

            Returns the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_workflow_definition(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkflowDefinitionImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.get_workflow_definition = Endpoint(
            settings={
                'response_type': (WorkflowDefinitionImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}',
                'operation_id': 'get_workflow_definition',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_workflow_definition
        )

        def __get_workflow_definition_by_process_id(
            self,
            process_id,
            **kwargs
        ):
            """Get workflow definition.  # noqa: E501

            Returns the workflow definition with the specified process ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_workflow_definition_by_process_id(process_id, async_req=True)
            >>> result = thread.get()

            Args:
                process_id (str): The process ID of the workflow definition.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkflowDefinitionImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['process_id'] = \
                process_id
            return self.call_with_http_info(**kwargs)

        self.get_workflow_definition_by_process_id = Endpoint(
            settings={
                'response_type': (WorkflowDefinitionImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/process/{processId}',
                'operation_id': 'get_workflow_definition_by_process_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'process_id',
                ],
                'required': [
                    'process_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'process_id':
                        (str,),
                },
                'attribute_map': {
                    'process_id': 'processId',
                },
                'location_map': {
                    'process_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_workflow_definition_by_process_id
        )

        def __get_workflow_definition_diagram(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Get process diagram.  # noqa: E501

            Returns the process diagram of the workflow definition with the specified ID. The diagram input stream returned can be null as deployed workflow definitions without graphical notation included do not have a diagram.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_workflow_definition_diagram(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.get_workflow_definition_diagram = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/diagram',
                'operation_id': 'get_workflow_definition_diagram',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_workflow_definition_diagram
        )

        def __get_workflow_definition_xml(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Get XML of workflow definition.  # noqa: E501

            Returns the XML source of the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_workflow_definition_xml(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.get_workflow_definition_xml = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/xml',
                'operation_id': 'get_workflow_definition_xml',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/xml'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_workflow_definition_xml
        )

        def __remove_assignment_rule(
            self,
            workflow_definition_id,
            rule_id,
            **kwargs
        ):
            """Remove assignment rule.  # noqa: E501

            Removes the assignment rule with the specified ID from the workflow definition with the specified ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_assignment_rule(workflow_definition_id, rule_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.
                rule_id (str): The ID of the assignment rule.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            kwargs['rule_id'] = \
                rule_id
            return self.call_with_http_info(**kwargs)

        self.remove_assignment_rule = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}/assignmentRules/{ruleId}',
                'operation_id': 'remove_assignment_rule',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                    'rule_id',
                ],
                'required': [
                    'workflow_definition_id',
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                    'rule_id':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                    'rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_assignment_rule
        )

        def __remove_workflow_definition(
            self,
            workflow_definition_id,
            **kwargs
        ):
            """Remove workflow definition.  # noqa: E501

            Removes the workflow definition with the specified ID. The workflow definition will be completely removed from the application, including any history.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_workflow_definition(workflow_definition_id, async_req=True)
            >>> result = thread.get()

            Args:
                workflow_definition_id (str): The ID of the workflow definition.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['workflow_definition_id'] = \
                workflow_definition_id
            return self.call_with_http_info(**kwargs)

        self.remove_workflow_definition = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/{workflowDefinitionId}',
                'operation_id': 'remove_workflow_definition',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'workflow_definition_id',
                ],
                'required': [
                    'workflow_definition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'workflow_definition_id':
                        (str,),
                },
                'attribute_map': {
                    'workflow_definition_id': 'workflowDefinitionId',
                },
                'location_map': {
                    'workflow_definition_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_workflow_definition
        )

        def __remove_workflow_definitions_in_job(
            self,
            **kwargs
        ):
            """Remove multiple workflow definitions.  # noqa: E501

            Removes multiple workflow definitions asynchronously. The workflow definition(s) will be completely removed from the application, including any history.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_workflow_definitions_in_job(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_body ([str]): The list of IDs of the workflow definitions to remove.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.remove_workflow_definitions_in_job = Endpoint(
            settings={
                'response_type': (Job,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/workflowDefinitions/removalJobs',
                'operation_id': 'remove_workflow_definitions_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_workflow_definitions_in_job
        )
