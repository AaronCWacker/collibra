"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_assignment_request import AddAssignmentRequest
from collibra_core.model.asset_type_impl import AssetTypeImpl
from collibra_core.model.assignment_impl import AssignmentImpl
from collibra_core.model.attribute_type import AttributeType
from collibra_core.model.change_assignment_request import ChangeAssignmentRequest
from collibra_core.model.complex_relation_type_impl import ComplexRelationTypeImpl
from collibra_core.model.relation_type_impl import RelationTypeImpl


class AssignmentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_assignment(
            self,
            **kwargs
        ):
            """Adds a new Assignment.  # noqa: E501

            Adds a new Assignment.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_assignment(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_assignment_request (AddAssignmentRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssignmentImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_assignment = Endpoint(
            settings={
                'response_type': (AssignmentImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments',
                'operation_id': 'add_assignment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_assignment_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_assignment_request':
                        (AddAssignmentRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_assignment_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_assignment
        )

        def __change_assignment(
            self,
            assignment_id,
            **kwargs
        ):
            """Changes the assignment with the information that is provided in the request.  # noqa: E501

            Changes the assignment with the information that is provided in the request. Only properties that are specified in the request and are not NULL are updated. All other properties are ignored.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_assignment(assignment_id, async_req=True)
            >>> result = thread.get()

            Args:
                assignment_id (str): The unique identifier of the Assignment.

            Keyword Args:
                change_assignment_request (ChangeAssignmentRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssignmentImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assignment_id'] = \
                assignment_id
            return self.call_with_http_info(**kwargs)

        self.change_assignment = Endpoint(
            settings={
                'response_type': (AssignmentImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/{assignmentId}',
                'operation_id': 'change_assignment',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'assignment_id',
                    'change_assignment_request',
                ],
                'required': [
                    'assignment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assignment_id':
                        (str,),
                    'change_assignment_request':
                        (ChangeAssignmentRequest,),
                },
                'attribute_map': {
                    'assignment_id': 'assignmentId',
                },
                'location_map': {
                    'assignment_id': 'path',
                    'change_assignment_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_assignment
        )

        def __find_assignments_for_resource(
            self,
            **kwargs
        ):
            """Find the assignments where a given resource is assigned.  # noqa: E501

            Find the assignments where a given resource is assigned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_assignments_for_resource(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                resource_id (str): The ID of the resource on which the assignment applies.. [optional]
                resource_type (str): The type of resource that is assigned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AssignmentImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_assignments_for_resource = Endpoint(
            settings={
                'response_type': ([AssignmentImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/forResource',
                'operation_id': 'find_assignments_for_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'resource_id',
                    'resource_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'resource_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('resource_type',): {

                        "VIEW": "View",
                        "ASSET": "Asset",
                        "COMMUNITY": "Community",
                        "DOMAIN": "Domain",
                        "ASSETTYPE": "AssetType",
                        "DOMAINTYPE": "DomainType",
                        "STATUS": "Status",
                        "USER": "User",
                        "CLASSIFICATIONMATCH": "ClassificationMatch",
                        "USERGROUP": "UserGroup",
                        "ATTRIBUTE": "Attribute",
                        "STRINGATTRIBUTE": "StringAttribute",
                        "SCRIPTATTRIBUTE": "ScriptAttribute",
                        "BOOLEANATTRIBUTE": "BooleanAttribute",
                        "DATEATTRIBUTE": "DateAttribute",
                        "NUMERICATTRIBUTE": "NumericAttribute",
                        "SINGLEVALUELISTATTRIBUTE": "SingleValueListAttribute",
                        "MULTIVALUELISTATTRIBUTE": "MultiValueListAttribute",
                        "COMMENT": "Comment",
                        "ATTACHMENT": "Attachment",
                        "RESPONSIBILITY": "Responsibility",
                        "WORKFLOW": "Workflow",
                        "JOB": "Job",
                        "RELATION": "Relation",
                        "RELATIONTYPE": "RelationType",
                        "COMPLEXRELATION": "ComplexRelation",
                        "COMPLEXRELATIONTYPE": "ComplexRelationType",
                        "ARTICULATIONRULE": "ArticulationRule",
                        "ASSIGNMENT": "Assignment",
                        "SCOPE": "Scope",
                        "RELATIONTRACE": "RelationTrace",
                        "VALIDATIONRULE": "ValidationRule",
                        "DATAQUALITYRULE": "DataQualityRule",
                        "DATAQUALITYMETRIC": "DataQualityMetric",
                        "ADDRESS": "Address",
                        "INSTANTMESSAGINGACCOUNT": "InstantMessagingAccount",
                        "EMAIL": "Email",
                        "PHONENUMBER": "PhoneNumber",
                        "WEBSITE": "Website",
                        "ACTIVITY": "Activity",
                        "FORMPROPERTY": "FormProperty",
                        "WORKFLOWTASK": "WorkflowTask",
                        "ACTIVITYCHANGE": "ActivityChange",
                        "WORKFLOWINSTANCE": "WorkflowInstance",
                        "ROLE": "Role",
                        "ATTRIBUTETYPE": "AttributeType",
                        "BOOLEANATTRIBUTETYPE": "BooleanAttributeType",
                        "DATEATTRIBUTETYPE": "DateAttributeType",
                        "DATETIMEATTRIBUTETYPE": "DateTimeAttributeType",
                        "MULTIVALUELISTATTRIBUTETYPE": "MultiValueListAttributeType",
                        "NUMERICATTRIBUTETYPE": "NumericAttributeType",
                        "SCRIPTATTRIBUTETYPE": "ScriptAttributeType",
                        "SINGLEVALUELISTATTRIBUTETYPE": "SingleValueListAttributeType",
                        "STRINGATTRIBUTETYPE": "StringAttributeType",
                        "VIEWSHARINGRULE": "ViewSharingRule",
                        "VIEWASSIGNMENTRULE": "ViewAssignmentRule",
                        "JDBCDRIVERFILE": "JdbcDriverFile",
                        "JDBCDRIVER": "JdbcDriver",
                        "JDBCINGESTIONPROPERTIES": "JdbcIngestionProperties",
                        "CSVINGESTIONPROPERTIES": "CsvIngestionProperties",
                        "EXCELINGESTIONPROPERTIES": "ExcelIngestionProperties",
                        "CONNECTIONSTRINGPARAMETER": "ConnectionStringParameter",
                        "ASSIGNEDCHARACTERISTICTYPE": "AssignedCharacteristicType",
                        "NOTIFICATION": "Notification",
                        "TAG": "Tag",
                        "COMPLEXRELATIONLEGTYPE": "ComplexRelationLegType",
                        "COMPLEXRELATIONATTRIBUTETYPE": "ComplexRelationAttributeType",
                        "COMPLEXRELATIONLEG": "ComplexRelationLeg",
                        "BASEDATATYPE": "BaseDataType",
                        "ADVANCEDDATATYPE": "AdvancedDataType",
                        "DIAGRAMPICTURE": "DiagramPicture",
                        "DIAGRAMPICTURESHARINGRULE": "DiagramPictureSharingRule",
                        "DIAGRAMPICTUREASSIGNMENTRULE": "DiagramPictureAssignmentRule",
                        "RATING": "Rating",
                        "CLASSIFICATION": "Classification"
                    },
                },
                'openapi_types': {
                    'resource_id':
                        (str,),
                    'resource_type':
                        (str,),
                },
                'attribute_map': {
                    'resource_id': 'resourceId',
                    'resource_type': 'resourceType',
                },
                'location_map': {
                    'resource_id': 'query',
                    'resource_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_assignments_for_resource
        )

        def __get_assignments_for_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Returns the Assignment identified by the given Asset.  # noqa: E501

            Returns the Assignment identified by the given Asset.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_assignments_for_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The unique identifier of the Asset.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssignmentImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_assignments_for_asset = Endpoint(
            settings={
                'response_type': (AssignmentImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/asset/{assetId}',
                'operation_id': 'get_assignments_for_asset',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_assignments_for_asset
        )

        def __get_assignments_for_asset_type(
            self,
            asset_type_id,
            **kwargs
        ):
            """Returns Assignments for given asset type id.  # noqa: E501

            Returns Assignments for given asset type id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_assignments_for_asset_type(asset_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_type_id (str): The unique identifier of the AssetType.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AssignmentImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_type_id'] = \
                asset_type_id
            return self.call_with_http_info(**kwargs)

        self.get_assignments_for_asset_type = Endpoint(
            settings={
                'response_type': ([AssignmentImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/assetType/{assetTypeId}',
                'operation_id': 'get_assignments_for_asset_type',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_type_id',
                ],
                'required': [
                    'asset_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_type_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_type_id': 'assetTypeId',
                },
                'location_map': {
                    'asset_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_assignments_for_asset_type
        )

        def __get_available_asset_types_for_domain(
            self,
            domain_id,
            **kwargs
        ):
            """Returns available asset types for domain identified by given id.  # noqa: E501

            Returns available asset types for domain identified by given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_available_asset_types_for_domain(domain_id, async_req=True)
            >>> result = thread.get()

            Args:
                domain_id (str): The unique identifier of the Domain.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AssetTypeImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['domain_id'] = \
                domain_id
            return self.call_with_http_info(**kwargs)

        self.get_available_asset_types_for_domain = Endpoint(
            settings={
                'response_type': ([AssetTypeImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/domain/{domainId}/assetTypes',
                'operation_id': 'get_available_asset_types_for_domain',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain_id',
                ],
                'required': [
                    'domain_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain_id':
                        (str,),
                },
                'attribute_map': {
                    'domain_id': 'domainId',
                },
                'location_map': {
                    'domain_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_available_asset_types_for_domain
        )

        def __get_available_attribute_types_for_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Returns available attribute types for asset identified by given id.  # noqa: E501

            Returns available attribute types for asset identified by given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_available_attribute_types_for_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The unique identifier of the Asset.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AttributeType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_available_attribute_types_for_asset = Endpoint(
            settings={
                'response_type': ([AttributeType],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/asset/{assetId}/attributeTypes',
                'operation_id': 'get_available_attribute_types_for_asset',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_available_attribute_types_for_asset
        )

        def __get_available_complex_relation_types_for_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Returns the available ComplexRelationTypes for the Asset identified by the given id.  # noqa: E501

            Returns the available ComplexRelationTypes for the Asset identified by the given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_available_complex_relation_types_for_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The unique identifier of the Asset.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ComplexRelationTypeImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_available_complex_relation_types_for_asset = Endpoint(
            settings={
                'response_type': ([ComplexRelationTypeImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/asset/{assetId}/complexRelationTypes',
                'operation_id': 'get_available_complex_relation_types_for_asset',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_available_complex_relation_types_for_asset
        )

        def __get_available_relation_types_for_asset(
            self,
            asset_id,
            **kwargs
        ):
            """Returns the available RelationTypes for the Asset identified by the given id.  # noqa: E501

            Returns the available RelationTypes for the Asset identified by the given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_available_relation_types_for_asset(asset_id, async_req=True)
            >>> result = thread.get()

            Args:
                asset_id (str): The unique identifier of the Asset.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [RelationTypeImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_id'] = \
                asset_id
            return self.call_with_http_info(**kwargs)

        self.get_available_relation_types_for_asset = Endpoint(
            settings={
                'response_type': ([RelationTypeImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/asset/{assetId}/relationTypes',
                'operation_id': 'get_available_relation_types_for_asset',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_id',
                ],
                'required': [
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_id':
                        (str,),
                },
                'attribute_map': {
                    'asset_id': 'assetId',
                },
                'location_map': {
                    'asset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_available_relation_types_for_asset
        )

        def __remove_assignment(
            self,
            assignment_id,
            **kwargs
        ):
            """Removes the Assignment identified by the given id.  # noqa: E501

            Removes the Assignment identified by the given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_assignment(assignment_id, async_req=True)
            >>> result = thread.get()

            Args:
                assignment_id (str): The unique identifier of the Assignment.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assignment_id'] = \
                assignment_id
            return self.call_with_http_info(**kwargs)

        self.remove_assignment = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/assignments/{assignmentId}',
                'operation_id': 'remove_assignment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'assignment_id',
                ],
                'required': [
                    'assignment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assignment_id':
                        (str,),
                },
                'attribute_map': {
                    'assignment_id': 'assignmentId',
                },
                'location_map': {
                    'assignment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_assignment
        )
