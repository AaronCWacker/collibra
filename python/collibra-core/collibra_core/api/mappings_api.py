"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_mapping_request import AddMappingRequest
from collibra_core.model.change_mapping_by_external_entity_request import ChangeMappingByExternalEntityRequest
from collibra_core.model.change_mapping_by_mapped_resource_request import ChangeMappingByMappedResourceRequest
from collibra_core.model.change_mapping_request import ChangeMappingRequest
from collibra_core.model.job import Job
from collibra_core.model.mapping import Mapping
from collibra_core.model.mapping_paged_response import MappingPagedResponse


class MappingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_mapping(
            self,
            **kwargs
        ):
            """Adds a new mapping.  # noqa: E501

            Adds a new mapping.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_mapping(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_mapping_request (AddMappingRequest): The properties of the mapping to be added.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_mapping = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings',
                'operation_id': 'add_mapping',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_mapping_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_mapping_request':
                        (AddMappingRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_mapping_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_mapping
        )

        def __add_mappings(
            self,
            **kwargs
        ):
            """Adds new mappings.  # noqa: E501

            Adds new mappings.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_mappings(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_mapping_request ([AddMappingRequest]): The properties of the mappings to be added.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Mapping]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_mappings = Endpoint(
            settings={
                'response_type': ([Mapping],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/bulk',
                'operation_id': 'add_mappings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_mapping_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_mapping_request':
                        ([AddMappingRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_mapping_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_mappings
        )

        def __change_mapping(
            self,
            mapping_id,
            **kwargs
        ):
            """Changes the mapping identified by its id.  # noqa: E501

            Changes the mapping identified by its <code>id</code>.<p>Change the mapping identified by its <code>id</code> with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_mapping(mapping_id, async_req=True)
            >>> result = thread.get()

            Args:
                mapping_id (str): The ID of the mapping to be changed.

            Keyword Args:
                change_mapping_request (ChangeMappingRequest): The properties of the mapping to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mapping_id'] = \
                mapping_id
            return self.call_with_http_info(**kwargs)

        self.change_mapping = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/{mappingId}',
                'operation_id': 'change_mapping',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'mapping_id',
                    'change_mapping_request',
                ],
                'required': [
                    'mapping_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mapping_id':
                        (str,),
                    'change_mapping_request':
                        (ChangeMappingRequest,),
                },
                'attribute_map': {
                    'mapping_id': 'mappingId',
                },
                'location_map': {
                    'mapping_id': 'path',
                    'change_mapping_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_mapping
        )

        def __change_mapping_by_external_entity(
            self,
            external_system_id,
            external_entity_id,
            **kwargs
        ):
            """Changes the mapping identified by its external ids.  # noqa: E501

            Changes the mapping identified by its external <code>id</code>s.<p>Changes the mapping identified by its external <code>id</code>s with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_mapping_by_external_entity(external_system_id, external_entity_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str): The external system ID of the mapping to be changed.
                external_entity_id (str): The external entity ID of the mapping to be changed.

            Keyword Args:
                change_mapping_by_external_entity_request (ChangeMappingByExternalEntityRequest): The properties of the mapping to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            kwargs['external_entity_id'] = \
                external_entity_id
            return self.call_with_http_info(**kwargs)

        self.change_mapping_by_external_entity = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/externalEntity/{externalEntityId}',
                'operation_id': 'change_mapping_by_external_entity',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                    'external_entity_id',
                    'change_mapping_by_external_entity_request',
                ],
                'required': [
                    'external_system_id',
                    'external_entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                    'external_entity_id':
                        (str,),
                    'change_mapping_by_external_entity_request':
                        (ChangeMappingByExternalEntityRequest,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                    'external_entity_id': 'externalEntityId',
                },
                'location_map': {
                    'external_system_id': 'path',
                    'external_entity_id': 'path',
                    'change_mapping_by_external_entity_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_mapping_by_external_entity
        )

        def __change_mapping_by_mapped_resource(
            self,
            external_system_id,
            mapped_resource_id,
            **kwargs
        ):
            """Changes the mapping identified by its external system id and mapped resource id.  # noqa: E501

            Changes the mapping identified by its external system <code>id</code> and mapped resource <code>id</code>.<p>Changes the mapping identified by its external system <code>id</code> and mapped resource <code>id</code> with the information that is present in the requests. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_mapping_by_mapped_resource(external_system_id, mapped_resource_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str): The external system id of the mapping to be changed.
                mapped_resource_id (str): The mapped resource id of the mapping to be changed.

            Keyword Args:
                change_mapping_by_mapped_resource_request (ChangeMappingByMappedResourceRequest): The properties of the mapping to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            kwargs['mapped_resource_id'] = \
                mapped_resource_id
            return self.call_with_http_info(**kwargs)

        self.change_mapping_by_mapped_resource = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/mappedResource/{mappedResourceId}',
                'operation_id': 'change_mapping_by_mapped_resource',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                    'mapped_resource_id',
                    'change_mapping_by_mapped_resource_request',
                ],
                'required': [
                    'external_system_id',
                    'mapped_resource_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                    'mapped_resource_id':
                        (str,),
                    'change_mapping_by_mapped_resource_request':
                        (ChangeMappingByMappedResourceRequest,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                    'mapped_resource_id': 'mappedResourceId',
                },
                'location_map': {
                    'external_system_id': 'path',
                    'mapped_resource_id': 'path',
                    'change_mapping_by_mapped_resource_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_mapping_by_mapped_resource
        )

        def __change_mappings(
            self,
            **kwargs
        ):
            """Changes multiple mappings identified by their ids.  # noqa: E501

            Changes multiple mappings identified by their <code>id</code>s.<p>Change the mappings identified by its <code>id</code>s with the information that is present in the requests. Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_mappings(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                change_mapping_request ([ChangeMappingRequest]): The properties of the mappings to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Mapping]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.change_mappings = Endpoint(
            settings={
                'response_type': ([Mapping],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/bulk',
                'operation_id': 'change_mappings',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'change_mapping_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'change_mapping_request':
                        ([ChangeMappingRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'change_mapping_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_mappings
        )

        def __change_mappings_by_external_entities(
            self,
            **kwargs
        ):
            """Changes the mappings identified by their external ids.  # noqa: E501

            Changes the mappings identified by their external <code>id</code>s.<p>Changes the mappings identified by their external <code>id</code>s with the information that is present in the requests. Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_mappings_by_external_entities(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                change_mapping_by_external_entity_request ([ChangeMappingByExternalEntityRequest]): The properties of the mappings to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Mapping]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.change_mappings_by_external_entities = Endpoint(
            settings={
                'response_type': ([Mapping],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/externalEntity/bulk',
                'operation_id': 'change_mappings_by_external_entities',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'change_mapping_by_external_entity_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'change_mapping_by_external_entity_request':
                        ([ChangeMappingByExternalEntityRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'change_mapping_by_external_entity_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_mappings_by_external_entities
        )

        def __change_mappings_by_mapped_resources(
            self,
            **kwargs
        ):
            """Changes the mapping identified by their external system ids and mapped resource ids.  # noqa: E501

            Changes the mapping identified by their external system <code>id</code>s and mapped resource <code>id</code>s.<p>Changes the mapping identified by their external system <code>id</code>s and mapped resource <code>id</code>s with the information that is present in the requests. Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_mappings_by_mapped_resources(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                change_mapping_by_mapped_resource_request ([ChangeMappingByMappedResourceRequest]): The properties of the mappings to be changed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Mapping]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.change_mappings_by_mapped_resources = Endpoint(
            settings={
                'response_type': ([Mapping],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/mappedResource/bulk',
                'operation_id': 'change_mappings_by_mapped_resources',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'change_mapping_by_mapped_resource_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'change_mapping_by_mapped_resource_request':
                        ([ChangeMappingByMappedResourceRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'change_mapping_by_mapped_resource_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_mappings_by_mapped_resources
        )

        def __find_mappings(
            self,
            **kwargs
        ):
            """Returns mappings matching the given search criteria.  # noqa: E501

            Returns mappings matching the given search criteria.<p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.</p>The returned synchronization information satisfies all constraints that are specified in this search criteria. By default a result containing 1000 mappings is returned.</p>  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_mappings(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                external_system_id (str): The ID of the external system that the mapped resource belongs to.. [optional]
                mapped_resource_type (str): The type of the mapped resource.. [optional]
                sync_action (str): The type of the action performed during last successful synchronization.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MappingPagedResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_mappings = Endpoint(
            settings={
                'response_type': (MappingPagedResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings',
                'operation_id': 'find_mappings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'external_system_id',
                    'mapped_resource_type',
                    'sync_action',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'mapped_resource_type',
                    'sync_action',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('mapped_resource_type',): {

                        "ASSET": "Asset",
                        "DOMAIN": "Domain",
                        "COMMUNITY": "Community"
                    },
                    ('sync_action',): {

                        "ADD": "ADD",
                        "UPDATE": "UPDATE",
                        "REMOVE": "REMOVE"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'external_system_id':
                        (str,),
                    'mapped_resource_type':
                        (str,),
                    'sync_action':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'external_system_id': 'externalSystemId',
                    'mapped_resource_type': 'mappedResourceType',
                    'sync_action': 'syncAction',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'external_system_id': 'query',
                    'mapped_resource_type': 'query',
                    'sync_action': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_mappings
        )

        def __get_mapping(
            self,
            mapping_id,
            **kwargs
        ):
            """Returns a mapping identified by given id.  # noqa: E501

            Returns a mapping identified by given <code>id</code>.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mapping(mapping_id, async_req=True)
            >>> result = thread.get()

            Args:
                mapping_id (str): The id of the mapping.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mapping_id'] = \
                mapping_id
            return self.call_with_http_info(**kwargs)

        self.get_mapping = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/{mappingId}',
                'operation_id': 'get_mapping',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mapping_id',
                ],
                'required': [
                    'mapping_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mapping_id':
                        (str,),
                },
                'attribute_map': {
                    'mapping_id': 'mappingId',
                },
                'location_map': {
                    'mapping_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mapping
        )

        def __get_mapping_by_external_entity(
            self,
            external_system_id,
            external_entity_id,
            **kwargs
        ):
            """Returns a mapping identified by its external ids.  # noqa: E501

            Returns a mapping identified by its external <code>id</code>s.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mapping_by_external_entity(external_system_id, external_entity_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str):
                external_entity_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            kwargs['external_entity_id'] = \
                external_entity_id
            return self.call_with_http_info(**kwargs)

        self.get_mapping_by_external_entity = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/externalEntity/{externalEntityId}',
                'operation_id': 'get_mapping_by_external_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                    'external_entity_id',
                ],
                'required': [
                    'external_system_id',
                    'external_entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                    'external_entity_id':
                        (str,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                    'external_entity_id': 'externalEntityId',
                },
                'location_map': {
                    'external_system_id': 'path',
                    'external_entity_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mapping_by_external_entity
        )

        def __get_mapping_by_mapped_resource(
            self,
            external_system_id,
            mapped_resource_id,
            **kwargs
        ):
            """Returns a mapping identified by its external system id and mapped resource id.  # noqa: E501

            Returns a mapping identified by its external system <code>id</code> and mapped resource <code>id</code>.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mapping_by_mapped_resource(external_system_id, mapped_resource_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str):
                mapped_resource_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Mapping
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            kwargs['mapped_resource_id'] = \
                mapped_resource_id
            return self.call_with_http_info(**kwargs)

        self.get_mapping_by_mapped_resource = Endpoint(
            settings={
                'response_type': (Mapping,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/mappedResource/{mappedResourceId}',
                'operation_id': 'get_mapping_by_mapped_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                    'mapped_resource_id',
                ],
                'required': [
                    'external_system_id',
                    'mapped_resource_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                    'mapped_resource_id':
                        (str,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                    'mapped_resource_id': 'mappedResourceId',
                },
                'location_map': {
                    'external_system_id': 'path',
                    'mapped_resource_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mapping_by_mapped_resource
        )

        def __remove_mapping(
            self,
            mapping_id,
            **kwargs
        ):
            """Removes the mapping identified by its id.  # noqa: E501

            Removes the mapping identified by its <code>id</code>.<p>If the mapping does not exist, an exception is NOT thrown.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_mapping(mapping_id, async_req=True)
            >>> result = thread.get()

            Args:
                mapping_id (str): The id of the mapping.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mapping_id'] = \
                mapping_id
            return self.call_with_http_info(**kwargs)

        self.remove_mapping = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/{mappingId}',
                'operation_id': 'remove_mapping',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'mapping_id',
                ],
                'required': [
                    'mapping_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mapping_id':
                        (str,),
                },
                'attribute_map': {
                    'mapping_id': 'mappingId',
                },
                'location_map': {
                    'mapping_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_mapping
        )

        def __remove_mapping_by_external_entity(
            self,
            external_system_id,
            external_entity_id,
            **kwargs
        ):
            """Removes the mapping identified by its external ids.  # noqa: E501

            Removes the mapping identified by its external <code>id</code>s.<p>If the mapping does not exist, an exception is NOT thrown.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_mapping_by_external_entity(external_system_id, external_entity_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str): The external system id of the mapping to be removed.
                external_entity_id (str): The external entity id of the mapping to be removed.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            kwargs['external_entity_id'] = \
                external_entity_id
            return self.call_with_http_info(**kwargs)

        self.remove_mapping_by_external_entity = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/externalEntity/{externalEntityId}',
                'operation_id': 'remove_mapping_by_external_entity',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                    'external_entity_id',
                ],
                'required': [
                    'external_system_id',
                    'external_entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                    'external_entity_id':
                        (str,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                    'external_entity_id': 'externalEntityId',
                },
                'location_map': {
                    'external_system_id': 'path',
                    'external_entity_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_mapping_by_external_entity
        )

        def __remove_mapping_by_mapped_resource(
            self,
            external_system_id,
            mapped_resource_id,
            **kwargs
        ):
            """Removes the mapping identified by its external system id and mapped resource id.  # noqa: E501

            Removes the mapping identified by its external system <code>id</code> and mapped resource <code>id</code>.<p>If the mapping does not exist, an exception is NOT thrown.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_mapping_by_mapped_resource(external_system_id, mapped_resource_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str): The external system id of the mapping to be changed.
                mapped_resource_id (str): The mapped resource id of the mapping to be changed.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            kwargs['mapped_resource_id'] = \
                mapped_resource_id
            return self.call_with_http_info(**kwargs)

        self.remove_mapping_by_mapped_resource = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/mappedResource/{mappedResourceId}',
                'operation_id': 'remove_mapping_by_mapped_resource',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                    'mapped_resource_id',
                ],
                'required': [
                    'external_system_id',
                    'mapped_resource_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                    'mapped_resource_id':
                        (str,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                    'mapped_resource_id': 'mappedResourceId',
                },
                'location_map': {
                    'external_system_id': 'path',
                    'mapped_resource_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_mapping_by_mapped_resource
        )

        def __remove_mappings_by_external_system_in_job(
            self,
            external_system_id,
            **kwargs
        ):
            """Removes all the mappings identified by given external system id.  # noqa: E501

            Removes all the mappings identified by given external system <code>id</code>.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_mappings_by_external_system_in_job(external_system_id, async_req=True)
            >>> result = thread.get()

            Args:
                external_system_id (str): The id of the external system of the mappings that will be removed.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['external_system_id'] = \
                external_system_id
            return self.call_with_http_info(**kwargs)

        self.remove_mappings_by_external_system_in_job = Endpoint(
            settings={
                'response_type': (Job,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/externalSystem/{externalSystemId}/removalJobs',
                'operation_id': 'remove_mappings_by_external_system_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_system_id',
                ],
                'required': [
                    'external_system_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_system_id':
                        (str,),
                },
                'attribute_map': {
                    'external_system_id': 'externalSystemId',
                },
                'location_map': {
                    'external_system_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_mappings_by_external_system_in_job
        )

        def __remove_mappings_in_job(
            self,
            **kwargs
        ):
            """Removes multiple mappings in job.  # noqa: E501

            Removes multiple mappings in job.<p>If any mapping does not exist, an exception is NOT thrown.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_mappings_in_job(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_body ([str]): The ids of the mappings to be removed.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.remove_mappings_in_job = Endpoint(
            settings={
                'response_type': (Job,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/mappings/removalJobs',
                'operation_id': 'remove_mappings_in_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_mappings_in_job
        )
