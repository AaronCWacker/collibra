"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from collibra_core.api_client import ApiClient, Endpoint
from collibra_core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from collibra_core.model.add_responsibility_request import AddResponsibilityRequest
from collibra_core.model.paged_response_responsibility import PagedResponseResponsibility
from collibra_core.model.responsibility_impl import ResponsibilityImpl


class ResponsibilitiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_responsibilities(
            self,
            **kwargs
        ):
            """Adds multiple responsibilities in one go.  # noqa: E501

            Adds multiple responsibilities in one go. Assigns the given users to the resources with the given roles.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_responsibilities(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_responsibility_request ([AddResponsibilityRequest]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ResponsibilityImpl]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_responsibilities = Endpoint(
            settings={
                'response_type': ([ResponsibilityImpl],),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/responsibilities/bulk',
                'operation_id': 'add_responsibilities',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_responsibility_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_responsibility_request':
                        ([AddResponsibilityRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_responsibility_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_responsibilities
        )

        def __add_responsibility(
            self,
            **kwargs
        ):
            """Adds a new responsibility.  # noqa: E501

            Adds new responsibility. Assigns given user to resource with given role.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_responsibility(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                add_responsibility_request (AddResponsibilityRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponsibilityImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.add_responsibility = Endpoint(
            settings={
                'response_type': (ResponsibilityImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/responsibilities',
                'operation_id': 'add_responsibility',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_responsibility_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_responsibility_request':
                        (AddResponsibilityRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_responsibility_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_responsibility
        )

        def __find_responsibilities(
            self,
            **kwargs
        ):
            """Finds responsibilities.  # noqa: E501

            Returns responsibilities matching the given search criteria.  Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned responsibilities satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 responsibilities is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_responsibilities(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                offset (int): The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.. [optional] if omitted the server will use the default value of 0
                limit (int): The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.. [optional] if omitted the server will use the default value of 0
                resource_ids ([str]): The list of IDs of the resources for which the responsibilities should be found.. [optional]
                owner_ids ([str]): The list of IDs of the owners for which the responsibilities should be found.. [optional]
                role_ids ([str]): The list of IDs of the roles for which the responsibilities should be found.. [optional]
                include_inherited (bool): Whether inherited responsibilities should be included in the search results.. [optional] if omitted the server will use the default value of True
                global_only (bool): Whether only global responsibilities should be searched.. [optional]
                sort_field (str): The field that should be used as reference for sorting.. [optional] if omitted the server will use the default value of "LAST_MODIFIED"
                sort_order (str): The order of sorting.. [optional] if omitted the server will use the default value of "DESC"
                type (str): Indicates which type of responsibilities should be searched for. Usage is mutually exclusive with the deprecated globalOnly flag.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PagedResponseResponsibility
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.find_responsibilities = Endpoint(
            settings={
                'response_type': (PagedResponseResponsibility,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/responsibilities',
                'operation_id': 'find_responsibilities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offset',
                    'limit',
                    'resource_ids',
                    'owner_ids',
                    'role_ids',
                    'include_inherited',
                    'global_only',
                    'sort_field',
                    'sort_order',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'sort_field',
                    'sort_order',
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('sort_field',): {

                        "CREATED_BY": "CREATED_BY",
                        "CREATED_ON": "CREATED_ON",
                        "LAST_MODIFIED": "LAST_MODIFIED"
                    },
                    ('sort_order',): {

                        "ASC": "ASC",
                        "DESC": "DESC"
                    },
                    ('type',): {

                        "ALL": "ALL",
                        "GLOBAL": "GLOBAL",
                        "RESOURCE": "RESOURCE"
                    },
                },
                'openapi_types': {
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'resource_ids':
                        ([str],),
                    'owner_ids':
                        ([str],),
                    'role_ids':
                        ([str],),
                    'include_inherited':
                        (bool,),
                    'global_only':
                        (bool,),
                    'sort_field':
                        (str,),
                    'sort_order':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'offset': 'offset',
                    'limit': 'limit',
                    'resource_ids': 'resourceIds',
                    'owner_ids': 'ownerIds',
                    'role_ids': 'roleIds',
                    'include_inherited': 'includeInherited',
                    'global_only': 'globalOnly',
                    'sort_field': 'sortField',
                    'sort_order': 'sortOrder',
                    'type': 'type',
                },
                'location_map': {
                    'offset': 'query',
                    'limit': 'query',
                    'resource_ids': 'query',
                    'owner_ids': 'query',
                    'role_ids': 'query',
                    'include_inherited': 'query',
                    'global_only': 'query',
                    'sort_field': 'query',
                    'sort_order': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                    'resource_ids': 'multi',
                    'owner_ids': 'multi',
                    'role_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_responsibilities
        )

        def __get_responsibility(
            self,
            responsibility_id,
            **kwargs
        ):
            """Returns the responsibility identified by the given id.  # noqa: E501

            Returns the responsibility identified by the given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_responsibility(responsibility_id, async_req=True)
            >>> result = thread.get()

            Args:
                responsibility_id (str): The unique identifier of the responsibility.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ResponsibilityImpl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['responsibility_id'] = \
                responsibility_id
            return self.call_with_http_info(**kwargs)

        self.get_responsibility = Endpoint(
            settings={
                'response_type': (ResponsibilityImpl,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/responsibilities/{responsibilityId}',
                'operation_id': 'get_responsibility',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'responsibility_id',
                ],
                'required': [
                    'responsibility_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'responsibility_id':
                        (str,),
                },
                'attribute_map': {
                    'responsibility_id': 'responsibilityId',
                },
                'location_map': {
                    'responsibility_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_responsibility
        )

        def __remove_responsibilities(
            self,
            **kwargs
        ):
            """Removes multiple responsibilities in one go.  # noqa: E501

            Removes multiple responsibilities in one go identified by given ids.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_responsibilities(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request_body ([str]): The unique identifiers of the responsibilities.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.remove_responsibilities = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/responsibilities/bulk',
                'operation_id': 'remove_responsibilities',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'request_body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_responsibilities
        )

        def __remove_responsibility(
            self,
            responsibility_id,
            **kwargs
        ):
            """Removes the responsibility identified by the given id.  # noqa: E501

            Removes the responsibility identified by the given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_responsibility(responsibility_id, async_req=True)
            >>> result = thread.get()

            Args:
                responsibility_id (str): The unique identifier of the responsibility.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['responsibility_id'] = \
                responsibility_id
            return self.call_with_http_info(**kwargs)

        self.remove_responsibility = Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/responsibilities/{responsibilityId}',
                'operation_id': 'remove_responsibility',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'responsibility_id',
                ],
                'required': [
                    'responsibility_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'responsibility_id':
                        (str,),
                },
                'attribute_map': {
                    'responsibility_id': 'responsibilityId',
                },
                'location_map': {
                    'responsibility_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_responsibility
        )
