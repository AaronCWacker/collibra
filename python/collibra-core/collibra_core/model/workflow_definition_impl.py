"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from collibra_core.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from collibra_core.model.asset_assignment_rule_impl import AssetAssignmentRuleImpl
    from collibra_core.model.role_impl import RoleImpl
    globals()['AssetAssignmentRuleImpl'] = AssetAssignmentRuleImpl
    globals()['RoleImpl'] = RoleImpl


class WorkflowDefinitionImpl(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('business_item_resource_type',): {
            'ASSET': "ASSET",
            'DOMAIN': "DOMAIN",
            'COMMUNITY': "COMMUNITY",
            'GLOBAL': "GLOBAL",
        },
        ('exclusivity',): {
            'RESOURCE_EXCLUSIVITY': "RESOURCE_EXCLUSIVITY",
            'DEFINITION_EXCLUSIVITY': "DEFINITION_EXCLUSIVITY",
            'UNCONSTRAINED': "UNCONSTRAINED",
        },
        ('start_events',): {
            'ASSET_ADDED': "ASSET_ADDED",
            'ASSET_REMOVED': "ASSET_REMOVED",
            'ASSET_STATUS_CHANGED': "ASSET_STATUS_CHANGED",
            'ASSET_DOMAIN_CHANGED': "ASSET_DOMAIN_CHANGED",
            'ASSET_TYPE_CHANGED': "ASSET_TYPE_CHANGED",
            'ASSET_ATTRIBUTE_CHANGED': "ASSET_ATTRIBUTE_CHANGED",
            'ASSET_NAME_CHANGED': "ASSET_NAME_CHANGED",
            'ASSET_DISPLAY_NAME_CHANGED': "ASSET_DISPLAY_NAME_CHANGED",
            'ASSET_ATTRIBUTE_ADDED': "ASSET_ATTRIBUTE_ADDED",
            'ASSET_ATTRIBUTE_REMOVED': "ASSET_ATTRIBUTE_REMOVED",
            'DOMAIN_ADDED': "DOMAIN_ADDED",
            'DOMAIN_REMOVED': "DOMAIN_REMOVED",
            'ROLE_GRANTED': "ROLE_GRANTED",
            'ROLE_REVOKED': "ROLE_REVOKED",
            'WORKFLOW_STARTED': "WORKFLOW_STARTED",
            'WORKFLOW_CANCELED': "WORKFLOW_CANCELED",
            'WORKLFLOW_ESCALATION': "WORKLFLOW_ESCALATION",
            'WORKFLOW_TASK_COMPLETED': "WORKFLOW_TASK_COMPLETED",
            'USER_ADDED': "USER_ADDED",
            'USER_REMOVED': "USER_REMOVED",
            'USER_DISABLED': "USER_DISABLED",
            'COMMENT_ADDED': "COMMENT_ADDED",
            'COMMENT_REMOVED': "COMMENT_REMOVED",
            'COMMENT_CHANGED': "COMMENT_CHANGED",
            'RELATION_ADDED_AND_ASSET_IS_SOURCE': "RELATION_ADDED_AND_ASSET_IS_SOURCE",
            'RELATION_REMOVED_AND_ASSET_WAS_SOURCE': "RELATION_REMOVED_AND_ASSET_WAS_SOURCE",
            'RELATION_ADDED_AND_ASSET_IS_TARGET': "RELATION_ADDED_AND_ASSET_IS_TARGET",
            'RELATION_REMOVED_AND_ASSET_WAS_TARGET': "RELATION_REMOVED_AND_ASSET_WAS_TARGET",
            'TAG_ASSIGN_CHANGED': "TAG_ASSIGN_CHANGED",
            'CLASSIFICATION_MATCH_ACCEPTED': "CLASSIFICATION_MATCH_ACCEPTED",
            'CLASSIFICATION_MATCH_REJECTED': "CLASSIFICATION_MATCH_REJECTED",
            'CLASSIFICATION_MATCH_ADDED': "CLASSIFICATION_MATCH_ADDED",
            'CLASSIFICATION_MATCH_REMOVED': "CLASSIFICATION_MATCH_REMOVED",
            'CLASSIFICATION_MATCH_UPDATED': "CLASSIFICATION_MATCH_UPDATED",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'resource_type': (str,),  # noqa: E501
            'created_by': (str,),  # noqa: E501
            'created_on': (int,),  # noqa: E501
            'last_modified_by': (str,),  # noqa: E501
            'last_modified_on': (int,),  # noqa: E501
            'system': (bool,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'process_id': (str,),  # noqa: E501
            'start_label': (str,),  # noqa: E501
            'form_required': (bool,),  # noqa: E501
            'start_form_key_available': (bool,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'domain_assignment_rules': ([AssetAssignmentRuleImpl],),  # noqa: E501
            'asset_assignment_rules': ([AssetAssignmentRuleImpl],),  # noqa: E501
            'business_item_resource_type': (str,),  # noqa: E501
            'exclusivity': (str,),  # noqa: E501
            'guest_user_accessible': (bool,),  # noqa: E501
            'registered_user_accessible': (bool,),  # noqa: E501
            'candidate_user_check_enabled': (bool,),  # noqa: E501
            'global_create': (bool,),  # noqa: E501
            'start_events': ([str],),  # noqa: E501
            'configuration_variables': ({str: (str,)},),  # noqa: E501
            'start_roles': ([RoleImpl],),  # noqa: E501
            'stop_roles': ([RoleImpl],),  # noqa: E501
            'reassign_roles': ([RoleImpl],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'resource_type': 'resourceType',  # noqa: E501
        'created_by': 'createdBy',  # noqa: E501
        'created_on': 'createdOn',  # noqa: E501
        'last_modified_by': 'lastModifiedBy',  # noqa: E501
        'last_modified_on': 'lastModifiedOn',  # noqa: E501
        'system': 'system',  # noqa: E501
        'name': 'name',  # noqa: E501
        'description': 'description',  # noqa: E501
        'process_id': 'processId',  # noqa: E501
        'start_label': 'startLabel',  # noqa: E501
        'form_required': 'formRequired',  # noqa: E501
        'start_form_key_available': 'startFormKeyAvailable',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'domain_assignment_rules': 'domainAssignmentRules',  # noqa: E501
        'asset_assignment_rules': 'assetAssignmentRules',  # noqa: E501
        'business_item_resource_type': 'businessItemResourceType',  # noqa: E501
        'exclusivity': 'exclusivity',  # noqa: E501
        'guest_user_accessible': 'guestUserAccessible',  # noqa: E501
        'registered_user_accessible': 'registeredUserAccessible',  # noqa: E501
        'candidate_user_check_enabled': 'candidateUserCheckEnabled',  # noqa: E501
        'global_create': 'globalCreate',  # noqa: E501
        'start_events': 'startEvents',  # noqa: E501
        'configuration_variables': 'configurationVariables',  # noqa: E501
        'start_roles': 'startRoles',  # noqa: E501
        'stop_roles': 'stopRoles',  # noqa: E501
        'reassign_roles': 'reassignRoles',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, resource_type, *args, **kwargs):  # noqa: E501
        """WorkflowDefinitionImpl - a model defined in OpenAPI

        Args:
            id (str): The id of the represented object (entity).
            resource_type (str): The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            created_by (str): The id of the user that created this resource.. [optional]  # noqa: E501
            created_on (int): The timestamp (in UTC time standard) of the creation of this resource.. [optional]  # noqa: E501
            last_modified_by (str): The id of the user who modified this resource the last time.. [optional]  # noqa: E501
            last_modified_on (int): The timestamp (in UTC time standard) of the last modification of this resource.. [optional]  # noqa: E501
            system (bool): Whether this is a system resource or not.. [optional]  # noqa: E501
            name (str): The name of the resource.. [optional]  # noqa: E501
            description (str): The description of the resource.. [optional]  # noqa: E501
            process_id (str): The <code>id</code> that uniquely identifies a workflow definition in the application.<p>It is present in the BPMN notation in the ID property of the '<process..' tag. Deploying a BPMN in DGC creates a new version if a process with the same ID already exists.. [optional]  # noqa: E501
            start_label (str): The label used for starting this workflow.. [optional]  # noqa: E501
            form_required (bool): Whether the start event for this workflow requires user interaction through a form or not.. [optional]  # noqa: E501
            start_form_key_available (bool): Whether the workflow has the start form key available or not. Form key is a unique indicator which points to the external definition of the form stored as a json object.. [optional]  # noqa: E501
            enabled (bool): Whether workflow is enabled or not.<p>A workflow has to be enabled for a user to be able to start a workflow. A workflow is enabled if it's status is put on the status 'enabled'. [optional]  # noqa: E501
            domain_assignment_rules ([AssetAssignmentRuleImpl]): The list of domain assignment rules.. [optional]  # noqa: E501
            asset_assignment_rules ([AssetAssignmentRuleImpl]): The list of asset assignment rules.. [optional]  # noqa: E501
            business_item_resource_type (str): The type of business item that the workflow can refer to. This could be either Community, Domain, Asset, or global.. [optional]  # noqa: E501
            exclusivity (str): The exclusivity of this workflow. This determines how many times a workflow can be started for a specific resource.. [optional]  # noqa: E501
            guest_user_accessible (bool): Whether this workflow definition is guest user accessible.. [optional]  # noqa: E501
            registered_user_accessible (bool): Whether the workflow definition is accessible by any registered user.. [optional]  # noqa: E501
            candidate_user_check_enabled (bool): Whether the candidate user check for this workflow is enabled.. [optional]  # noqa: E501
            global_create (bool): Whether the workflow is accessible from the global create menu.. [optional]  # noqa: E501
            start_events ([str]): The start events in a list of WorkflowStartEventType enums.. [optional]  # noqa: E501
            configuration_variables ({str: (str,)}): The map of configuration variable key-value pairs.. [optional]  # noqa: E501
            start_roles ([RoleImpl]): The roles allowed to start the process.. [optional]  # noqa: E501
            stop_roles ([RoleImpl]): The roles allowed to stop processes/tasks.. [optional]  # noqa: E501
            reassign_roles ([RoleImpl]): The roles allowed to reassign tasks.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.resource_type = resource_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
